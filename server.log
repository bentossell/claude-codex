
> codex@0.1.0 dev
> next dev

   ▲ Next.js 15.3.2
   - Local:        http://localhost:3000
   - Network:      http://192.168.10.112:3000
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Ready in 1314ms
 ○ Compiling /api/logs ...
 ✓ Compiled /api/logs in 612ms (592 modules)
 GET /api/logs?t=1748014184036 200 in 748ms
 GET /api/logs?t=1748014183960 200 in 793ms
 GET /api/logs?t=1748014185035 200 in 19ms
 ○ Compiling /logs/realtime ...
 ✓ Compiled /middleware in 2.1s (1453 modules)
 GET /api/logs?t=1748014186912 200 in 614ms
 GET /logs/realtime 200 in 2410ms
 ○ Compiling /tasks/[id] ...
 ✓ Compiled /tasks/[id] in 941ms (1342 modules)
 GET /api/logs?t=1748014189158 200 in 53ms
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
 GET /tasks/cmb0uz46000176dfk83jjvrpp 200 in 1759ms
 ✓ Compiled /api/index in 329ms (1369 modules)
🔍 DEBUG: Initialize called, current db status: null
🔍 DEBUG: Ensuring data directory exists: /Users/bentossell/codex/data
🔍 DEBUG: Opening database at: /Users/bentossell/codex/data/codebase-index.db
🔍 DEBUG: Database opened successfully
🔍 DEBUG: Creating tables...
🔍 DEBUG: Tables created
🧠 Loading embedding model...
✅ Embedding model ready
 GET /api/index?repository=bentossell%2Fbentossell 200 in 747ms
 GET /api/logs?t=1748014190912 200 in 11ms
 GET /api/logs?t=1748014191914 200 in 9ms
 ✓ Compiled /api/tasks/[id]/regenerate in 494ms (1419 modules)
 GET /api/logs?t=1748014192914 200 in 11ms
[32m[2025-05-23T15:29:53.104Z] [INFO] [API:Regenerate] Regenerating code for task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
prisma:query DELETE FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" = $1
prisma:query INSERT INTO "public"."ClaudeJob" ("id","taskId","prompt","model","status","generatedAt") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt"
[32m[2025-05-23T15:29:53.116Z] [INFO] [API:Regenerate] Starting code regeneration[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp",
  "jobId": "cmb0yinko00016d7hktc50chv"
}
[32m[2025-05-23T15:29:53.117Z] [INFO] [CodeRegeneration] Starting async code regeneration[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp",
  "jobId": "cmb0yinko00016d7hktc50chv"
}
 POST /api/tasks/cmb0uz46000176dfk83jjvrpp/regenerate 200 in 1155ms
prisma:query UPDATE "public"."ClaudeJob" SET "status" = $1 WHERE ("public"."ClaudeJob"."id" = $2 AND 1=1) RETURNING "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt"
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
[32m[2025-05-23T15:29:53.120Z] [INFO] [CodeRegeneration] Calling Claude service[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
🔍 Starting code generation for task: cmb0uz46000176dfk83jjvrpp
📂 Fetching repository context...
🔧 DEBUG: About to call getRepositoryContext with: {
  repository: 'bentossell/bentossell',
  branch: 'main',
  description: "change the header topbar name 'ben tossell' to say 'claude code woz ere'"
}
🧠 Getting intelligent repository context for: bentossell/bentossell
🔧 Ensuring database initialization...
🔍 DEBUG: Initialize called, current db status: null
🔍 DEBUG: Ensuring data directory exists: /Users/bentossell/codex/data
🔍 DEBUG: Opening database at: /Users/bentossell/codex/data/codebase-index.db
🔍 DEBUG: Database opened successfully
🔍 DEBUG: Creating tables...
🔍 DEBUG: Tables created
🧠 Loading embedding model...
✅ Embedding model ready
🔍 DEBUG: needsUpdate called for: bentossell/bentossell
🔍 DEBUG: Database status in needsUpdate: connected
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 Repo bentossell/bentossell: stored=b7b9240 current=b7b9240
✅ Using cached repository index
🔍 Advanced search parameters: {
  repository: 'bentossell/bentossell',
  taskDescription: "change the header topbar name 'ben tossell' to say 'claude code woz ere'",
  limit: 15
}
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 DEBUG: Starting search for: {
  repoName: 'bentossell/bentossell',
  taskDescription: "change the header topbar name 'ben tossell' to say 'claude code woz ere'",
  limit: 15
}
🔍 DEBUG: getOrCreateRepository called for: bentossell/bentossell
🔍 DEBUG: Database connection status: connected
🔍 DEBUG: Repository lookup result: { id: 1 }
🔍 DEBUG: Repository ID: 1
🔍 DEBUG: Generated task embedding, length: 384
🔍 DEBUG: Found files in database: 15
  📄 .cursor/environment.json (data)
  📄 BLOG.md (documentation)
  📄 README.md (documentation)
  📄 assets/css/styles.css (style)
  📄 assets/images/README.md (documentation)
  📄 blog/index.md (documentation)
  📄 blog/posts/2024-05-20-investment-philosophy.md (documentation)
  📄 blog/posts/2024-05-23-building-this-blog.md (documentation)
  📄 blog/posts/2025-05-23-building-with-ai-tools-in-2024.md (documentation)
  📄 create-post.js (script)
  📄 food.md (documentation)
  📄 index.html (page)
  📄 investments.md (documentation)
  📄 package.json (config)
  📄 tools.md (documentation)
🔍 DEBUG: Analyzing file: .cursor/environment.json
  📊 Base semantic score: -0.011
  🔍 Checking for quoted text: "ben tossell" in .cursor/environment.json
  ❌ "ben tossell" NOT found in .cursor/environment.json
  📊 Final score for .cursor/environment.json: -0.011 (reason: semantic similarity)
  ❌ Excluding .cursor/environment.json (score too low: -0.011)
🔍 DEBUG: Analyzing file: BLOG.md
  📊 Base semantic score: 0.069
  🔍 Checking for quoted text: "ben tossell" in BLOG.md
  🎯 FOUND "ben tossell" in BLOG.md, score boosted to 2.069
  📊 Final score for BLOG.md: 3.269 (reason: semantic similarity, contains exact text "ben tossell", contains "change", contains "header", contains "name", contains "code")
  ✅ Adding BLOG.md to results
🔍 DEBUG: Analyzing file: README.md
  📊 Base semantic score: 0.136
  🔍 Checking for quoted text: "ben tossell" in README.md
  ❌ "ben tossell" NOT found in README.md
  📊 Final score for README.md: 0.436 (reason: semantic similarity, contains "code")
  ✅ Adding README.md to results
🔍 DEBUG: Analyzing file: assets/css/styles.css
  📊 Base semantic score: 0.299
  🔍 Checking for quoted text: "ben tossell" in assets/css/styles.css
  🎯 FOUND "ben tossell" in assets/css/styles.css, score boosted to 2.299
  📊 Final score for assets/css/styles.css: 3.499 (reason: semantic similarity, contains exact text "ben tossell", contains "header", contains "topbar", contains "tossell'", contains "code")
  ✅ Adding assets/css/styles.css to results
🔍 DEBUG: Analyzing file: assets/images/README.md
  📊 Base semantic score: 0.241
  🔍 Checking for quoted text: "ben tossell" in assets/images/README.md
  🎯 FOUND "ben tossell" in assets/images/README.md, score boosted to 2.241
  📊 Final score for assets/images/README.md: 2.841 (reason: semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'")
  ✅ Adding assets/images/README.md to results
🔍 DEBUG: Analyzing file: blog/index.md
  📊 Base semantic score: -0.033
  🔍 Checking for quoted text: "ben tossell" in blog/index.md
  ❌ "ben tossell" NOT found in blog/index.md
  📊 Final score for blog/index.md: -0.033 (reason: semantic similarity)
  ❌ Excluding blog/index.md (score too low: -0.033)
🔍 DEBUG: Analyzing file: blog/posts/2024-05-20-investment-philosophy.md
  📊 Base semantic score: 0.035
  🔍 Checking for quoted text: "ben tossell" in blog/posts/2024-05-20-investment-philosophy.md
  🎯 FOUND "ben tossell" in blog/posts/2024-05-20-investment-philosophy.md, score boosted to 2.035
  📊 Final score for blog/posts/2024-05-20-investment-philosophy.md: 2.035 (reason: semantic similarity, contains exact text "ben tossell")
  ✅ Adding blog/posts/2024-05-20-investment-philosophy.md to results
🔍 DEBUG: Analyzing file: blog/posts/2024-05-23-building-this-blog.md
  📊 Base semantic score: 0.150
  🔍 Checking for quoted text: "ben tossell" in blog/posts/2024-05-23-building-this-blog.md
  🎯 FOUND "ben tossell" in blog/posts/2024-05-23-building-this-blog.md, score boosted to 2.150
  📊 Final score for blog/posts/2024-05-23-building-this-blog.md: 2.450 (reason: semantic similarity, contains exact text "ben tossell", contains "code")
  ✅ Adding blog/posts/2024-05-23-building-this-blog.md to results
🔍 DEBUG: Analyzing file: blog/posts/2025-05-23-building-with-ai-tools-in-2024.md
  📊 Base semantic score: 0.218
  🔍 Checking for quoted text: "ben tossell" in blog/posts/2025-05-23-building-with-ai-tools-in-2024.md
  🎯 FOUND "ben tossell" in blog/posts/2025-05-23-building-with-ai-tools-in-2024.md, score boosted to 2.218
  📊 Final score for blog/posts/2025-05-23-building-with-ai-tools-in-2024.md: 3.118 (reason: semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  ✅ Adding blog/posts/2025-05-23-building-with-ai-tools-in-2024.md to results
🔍 DEBUG: Analyzing file: create-post.js
  📊 Base semantic score: 0.068
  🔍 Checking for quoted text: "ben tossell" in create-post.js
  🎯 FOUND "ben tossell" in create-post.js, score boosted to 2.068
  📊 Final score for create-post.js: 2.968 (reason: semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  ✅ Adding create-post.js to results
🔍 DEBUG: Analyzing file: food.md
  📊 Base semantic score: 0.035
  🔍 Checking for quoted text: "ben tossell" in food.md
  ❌ "ben tossell" NOT found in food.md
  📊 Final score for food.md: 0.035 (reason: semantic similarity)
  ❌ Excluding food.md (score too low: 0.035)
🔍 DEBUG: Analyzing file: index.html
  📊 Base semantic score: 0.381
  🔍 Checking for quoted text: "ben tossell" in index.html
  🎯 FOUND "ben tossell" in index.html, score boosted to 5.881
  📊 Final score for index.html: 7.681 (reason: semantic similarity, main HTML file for UI change, HTML file, contains exact text "ben tossell", contains "change", contains "header", contains "topbar", contains "name", contains "tossell'", contains "code")
  ✅ Adding index.html to results
🔍 DEBUG: Analyzing file: investments.md
  📊 Base semantic score: 0.055
  🔍 Checking for quoted text: "ben tossell" in investments.md
  ❌ "ben tossell" NOT found in investments.md
  📊 Final score for investments.md: 0.055 (reason: semantic similarity)
  ❌ Excluding investments.md (score too low: 0.055)
🔍 DEBUG: Analyzing file: package.json
  📊 Base semantic score: 0.196
  🔍 Checking for quoted text: "ben tossell" in package.json
  🎯 FOUND "ben tossell" in package.json, score boosted to 2.196
  📊 Final score for package.json: 2.996 (reason: semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'", essential config)
  ✅ Adding package.json to results
🔍 DEBUG: Analyzing file: tools.md
  📊 Base semantic score: 0.239
  🔍 Checking for quoted text: "ben tossell" in tools.md
  ❌ "ben tossell" NOT found in tools.md
  📊 Final score for tools.md: 0.539 (reason: semantic similarity, contains "code")
  ✅ Adding tools.md to results
🔍 DEBUG: Final search results:
  🏆 index.html - Score: 7.681 - semantic similarity, main HTML file for UI change, HTML file, contains exact text "ben tossell", contains "change", contains "header", contains "topbar", contains "name", contains "tossell'", contains "code"
  🏆 assets/css/styles.css - Score: 3.499 - semantic similarity, contains exact text "ben tossell", contains "header", contains "topbar", contains "tossell'", contains "code"
  🏆 BLOG.md - Score: 3.269 - semantic similarity, contains exact text "ben tossell", contains "change", contains "header", contains "name", contains "code"
  🏆 blog/posts/2025-05-23-building-with-ai-tools-in-2024.md - Score: 3.118 - semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code"
  🏆 package.json - Score: 2.996 - semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'", essential config
  🏆 create-post.js - Score: 2.968 - semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code"
  🏆 assets/images/README.md - Score: 2.841 - semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'"
  🏆 blog/posts/2024-05-23-building-this-blog.md - Score: 2.450 - semantic similarity, contains exact text "ben tossell", contains "code"
  🏆 blog/posts/2024-05-20-investment-philosophy.md - Score: 2.035 - semantic similarity, contains exact text "ben tossell"
  🏆 tools.md - Score: 0.539 - semantic similarity, contains "code"
  🏆 README.md - Score: 0.436 - semantic similarity, contains "code"
🎯 Found 11 relevant files for task: "change the header topbar name 'ben tossell' to say 'claude code woz ere'"
  - index.html (page, score: 7.68, semantic similarity, main HTML file for UI change, HTML file, contains exact text "ben tossell", contains "change", contains "header", contains "topbar", contains "name", contains "tossell'", contains "code")
  - assets/css/styles.css (style, score: 3.50, semantic similarity, contains exact text "ben tossell", contains "header", contains "topbar", contains "tossell'", contains "code")
  - BLOG.md (documentation, score: 3.27, semantic similarity, contains exact text "ben tossell", contains "change", contains "header", contains "name", contains "code")
  - blog/posts/2025-05-23-building-with-ai-tools-in-2024.md (documentation, score: 3.12, semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  - package.json (config, score: 3.00, semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'", essential config)
  - create-post.js (script, score: 2.97, semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  - assets/images/README.md (documentation, score: 2.84, semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'")
  - blog/posts/2024-05-23-building-this-blog.md (documentation, score: 2.45, semantic similarity, contains exact text "ben tossell", contains "code")
  - blog/posts/2024-05-20-investment-philosophy.md (documentation, score: 2.03, semantic similarity, contains exact text "ben tossell")
  - tools.md (documentation, score: 0.54, semantic similarity, contains "code")
  - README.md (documentation, score: 0.44, semantic similarity, contains "code")

🔍 Debug - Files containing "ben tossell":
🔍 DEBUG: getAllFiles called for: bentossell/bentossell
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 DEBUG: getOrCreateRepository called for: bentossell/bentossell
🔍 DEBUG: Database connection status: connected
🔍 DEBUG: Repository lookup result: { id: 1 }
  ✅ BLOG.md - contains "ben tossell"
  ✅ assets/css/styles.css - contains "ben tossell"
  ✅ assets/images/README.md - contains "ben tossell"
  ✅ blog/posts/2024-05-20-investment-philosophy.md - contains "ben tossell"
  ✅ blog/posts/2024-05-23-building-this-blog.md - contains "ben tossell"
  ✅ blog/posts/2025-05-23-building-with-ai-tools-in-2024.md - contains "ben tossell"
  ✅ create-post.js - contains "ben tossell"
  ✅ index.html - contains "ben tossell"
  ✅ package.json - contains "ben tossell"
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
✅ Smart context ready: 11 relevant files selected
🔍 DEBUG: Final mainFiles being sent to Claude:
  📄 index.html (24857 chars)
  📄 assets/css/styles.css (18368 chars)
  📄 BLOG.md (3462 chars)
  📄 blog/posts/2025-05-23-building-with-ai-tools-in-2024.md (3730 chars)
  📄 package.json (443 chars)
  📄 create-post.js (5006 chars)
  📄 assets/images/README.md (1195 chars)
  📄 blog/posts/2024-05-23-building-this-blog.md (1762 chars)
  📄 blog/posts/2024-05-20-investment-philosophy.md (2102 chars)
  📄 tools.md (116 chars)
  📄 README.md (627 chars)
✅ Repository context fetched successfully
🔧 DEBUG: Repository context result: {
  structureLength: 5,
  hasPackageJson: true,
  mainFilesCount: 11,
  readme: 'bentossell/bentossell - 15 files indexed, last updated 2025-05-23T14:35:00.486Z...'
}
📝 Generated prompt for Claude
🔧 DEBUG: Prompt includes files: index.html, assets/css/styles.css, BLOG.md, blog/posts/2025-05-23-building-with-ai-tools-in-2024.md, package.json, create-post.js, assets/images/README.md, blog/posts/2024-05-23-building-this-blog.md, blog/posts/2024-05-20-investment-philosophy.md, tools.md, README.md
🔧 DEBUG: Prompt length: 64736
🤖 Calling Claude API...
 GET /api/logs?t=1748014193913 200 in 15ms
 ✓ Compiled /api/tasks/[id] in 284ms (1421 modules)
 GET /api/logs?t=1748014194160 200 in 309ms
[32m[2025-05-23T15:29:55.016Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
[32m[2025-05-23T15:29:55.022Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 883ms
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
 GET /api/logs?t=1748014195160 200 in 7ms
 GET /api/logs?t=1748014196160 200 in 19ms
 GET /api/logs?t=1748014197160 200 in 17ms
 GET /api/logs?t=1748014198160 200 in 20ms
[32m[2025-05-23T15:29:58.937Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:29:58.942Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 10ms
 GET /api/logs?t=1748014199160 200 in 5ms
 GET /api/logs?t=1748014200160 200 in 16ms
 GET /api/logs?t=1748014201159 200 in 11ms
[32m[2025-05-23T15:30:01.933Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:01.937Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 13ms
 GET /api/logs?t=1748014202160 200 in 8ms
 GET /api/logs?t=1748014203160 200 in 17ms
 GET /api/logs?t=1748014204160 200 in 35ms
[32m[2025-05-23T15:30:04.941Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:04.946Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 12ms
 GET /api/logs?t=1748014205161 200 in 5ms
 GET /api/logs?t=1748014206160 200 in 8ms
 GET /api/logs?t=1748014207159 200 in 17ms
[32m[2025-05-23T15:30:07.940Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:07.945Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748014208160 200 in 7ms
 GET /api/logs?t=1748014209914 200 in 589ms
 GET /api/logs?t=1748014210922 200 in 203ms
 GET /api/logs?t=1748014211909 200 in 247ms
[32m[2025-05-23T15:30:12.705Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:12.841Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 227ms
 GET /api/logs?t=1748014212907 200 in 158ms
 GET /api/logs?t=1748014213907 200 in 172ms
[32m[2025-05-23T15:30:14.574Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:14.709Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 414ms
 GET /api/logs?t=1748014214905 200 in 360ms
 GET /api/logs?t=1748014215607 200 in 405ms
[32m[2025-05-23T15:30:16.763Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:16.848Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 137ms
 GET /api/logs?t=1748014216903 200 in 30ms
 GET /api/logs?t=1748014217904 200 in 21ms
 GET /api/logs?t=1748014218903 200 in 64ms
 GET /api/logs?t=1748014219900 200 in 47ms
[32m[2025-05-23T15:30:19.991Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:20.031Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 78ms
 GET /api/logs?t=1748014220903 200 in 2017ms
 GET /api/logs?t=1748014221900 200 in 2229ms
 GET /api/logs?t=1748014222898 200 in 1043ms
 GET /api/logs?t=1748014223898 200 in 637ms
 GET /api/logs?t=1748014224899 200 in 332ms
 GET /api/logs?t=1748014225897 200 in 30ms
 GET /api/logs?t=1748014226897 200 in 36ms
 GET /api/logs?t=1748014227896 200 in 15ms
 GET /api/logs?t=1748014228896 200 in 29ms
 GET /api/logs?t=1748014229895 200 in 18ms
 GET /api/logs?t=1748014230895 200 in 15ms
 GET /api/logs?t=1748014231895 200 in 11ms
 GET /api/logs?t=1748014232897 200 in 15ms
 GET /api/logs?t=1748014233895 200 in 14ms
 GET /api/logs?t=1748014234893 200 in 19ms
 GET /api/logs?t=1748014235894 200 in 25ms
 GET /api/logs?t=1748014236893 200 in 10ms
 GET /api/logs?t=1748014237893 200 in 18ms
 GET /api/logs?t=1748014238893 200 in 18ms
 GET /api/logs?t=1748014239724 200 in 16ms
 GET /api/logs?t=1748014240139 200 in 15ms
 GET /api/logs?t=1748014241139 200 in 16ms
 GET /api/logs?t=1748014242139 200 in 18ms
 GET /api/logs?t=1748014243138 200 in 23ms
 GET /api/logs?t=1748014244139 200 in 20ms
 GET /api/logs?t=1748014245137 200 in 17ms
[32m[2025-05-23T15:30:46.035Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:46.042Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 20ms
 GET /api/logs?t=1748014246892 200 in 13ms
 GET /api/logs?t=1748014247891 200 in 14ms
 GET /api/logs?t=1748014248709 200 in 19ms
 GET /api/logs?t=1748014249138 200 in 35ms
[32m[2025-05-23T15:30:49.925Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:49.928Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 8ms
 GET /api/logs?t=1748014250138 200 in 6ms
 GET /api/logs?t=1748014251138 200 in 16ms
 GET /api/logs?t=1748014252138 200 in 27ms
[32m[2025-05-23T15:30:52.723Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:52.730Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 18ms
 GET /api/logs?t=1748014253890 200 in 15ms
 GET /api/logs?t=1748014254890 200 in 21ms
[32m[2025-05-23T15:30:55.033Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:55.039Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 13ms
 GET /api/logs?t=1748014255891 200 in 14ms
 GET /api/logs?t=1748014256890 200 in 13ms
 GET /api/logs?t=1748014257138 200 in 12ms
 GET /api/logs?t=1748014258137 200 in 20ms
[32m[2025-05-23T15:30:58.912Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:30:58.917Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748014259138 200 in 19ms
 GET /api/logs?t=1748014260137 200 in 18ms
[32m[2025-05-23T15:31:01.049Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:01.053Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 28ms
 GET /api/logs?t=1748014261890 200 in 15ms
 GET /api/logs?t=1748014262890 200 in 18ms
 GET /api/logs?t=1748014263890 200 in 20ms
[32m[2025-05-23T15:31:04.047Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:04.051Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 12ms
 GET /api/logs?t=1748014264890 200 in 29ms
 GET /api/logs?t=1748014265890 200 in 17ms
 GET /api/logs?t=1748014266890 200 in 5ms
[32m[2025-05-23T15:31:07.031Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:07.036Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748014267890 200 in 18ms
 GET /api/logs?t=1748014268890 200 in 18ms
 GET /api/logs?t=1748014269890 200 in 25ms
[32m[2025-05-23T15:31:10.024Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:10.026Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 8ms
 GET /api/logs?t=1748014270890 200 in 15ms
 GET /api/logs?t=1748014271890 200 in 16ms
 GET /api/logs?t=1748014272890 200 in 14ms
[32m[2025-05-23T15:31:13.038Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:13.043Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 16ms
 GET /api/logs?t=1748014273890 200 in 19ms
 GET /api/logs?t=1748014274889 200 in 15ms
 GET /api/logs?t=1748014275890 200 in 20ms
[32m[2025-05-23T15:31:16.036Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:16.041Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 14ms
 GET /api/logs?t=1748014276888 200 in 17ms
 GET /api/logs?t=1748014277890 200 in 13ms
 GET /api/logs?t=1748014278890 200 in 15ms
[32m[2025-05-23T15:31:19.038Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:19.043Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 14ms
 GET /api/logs?t=1748014279890 200 in 18ms
 GET /api/logs?t=1748014280889 200 in 19ms
 GET /api/logs?t=1748014281891 200 in 11ms
[32m[2025-05-23T15:31:22.034Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:22.039Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 14ms
 GET /api/logs?t=1748014282889 200 in 18ms
 GET /api/logs?t=1748014283890 200 in 25ms
 GET /api/logs?t=1748014284889 200 in 26ms
[32m[2025-05-23T15:31:25.038Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:25.047Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 20ms
 GET /api/logs?t=1748014285889 200 in 14ms
 GET /api/logs?t=1748014286890 200 in 18ms
 GET /api/logs?t=1748014287890 200 in 18ms
[32m[2025-05-23T15:31:28.037Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:28.041Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 14ms
 GET /api/logs?t=1748014288889 200 in 16ms
 GET /api/logs?t=1748014289890 200 in 14ms
 GET /api/logs?t=1748014290889 200 in 16ms
[32m[2025-05-23T15:31:31.034Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:31.040Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748014291890 200 in 17ms
 GET /api/logs?t=1748014292889 200 in 16ms
 GET /api/logs?t=1748014293890 200 in 15ms
[32m[2025-05-23T15:31:34.036Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT 1
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:34.042Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748014294889 200 in 15ms
 GET /api/logs?t=1748014295890 200 in 15ms
 GET /api/logs?t=1748014296889 200 in 15ms
[32m[2025-05-23T15:31:37.035Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:37.039Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 12ms
 GET /api/logs?t=1748014297890 200 in 14ms
 GET /api/logs?t=1748014298889 200 in 17ms
 GET /api/logs?t=1748014299890 200 in 17ms
[32m[2025-05-23T15:31:40.033Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:40.038Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 16ms
 GET /api/logs?t=1748014300889 200 in 16ms
 GET /api/logs?t=1748014301889 200 in 14ms
 GET /api/logs?t=1748014302889 200 in 18ms
[32m[2025-05-23T15:31:43.034Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:43.041Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748014303890 200 in 13ms
 GET /api/logs?t=1748014304890 200 in 12ms
 GET /api/logs?t=1748014305889 200 in 12ms
[32m[2025-05-23T15:31:46.034Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:46.038Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 13ms
 GET /api/logs?t=1748014306889 200 in 15ms
 GET /api/logs?t=1748014307890 200 in 17ms
 GET /api/logs?t=1748014308890 200 in 11ms
[32m[2025-05-23T15:31:49.031Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:49.035Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 13ms
 GET /api/logs?t=1748014309889 200 in 18ms
 GET /api/logs?t=1748014310889 200 in 14ms
 GET /api/logs?t=1748014311890 200 in 12ms
[32m[2025-05-23T15:31:52.032Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:52.037Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 13ms
 GET /api/logs?t=1748014312891 200 in 11ms
 GET /api/logs?t=1748014313889 200 in 10ms
 GET /api/logs?t=1748014314890 200 in 12ms
[32m[2025-05-23T15:31:55.036Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:55.042Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 17ms
 GET /api/logs?t=1748014315889 200 in 12ms
 GET /api/logs?t=1748014316890 200 in 15ms
 GET /api/logs?t=1748014317890 200 in 13ms
[32m[2025-05-23T15:31:58.035Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:31:58.039Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 12ms
 GET /api/logs?t=1748014318890 200 in 12ms
 GET /api/logs?t=1748014319890 200 in 15ms
[32m[2025-05-23T15:32:01.040Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:32:01.046Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 13ms
[32m[2025-05-23T15:32:04.037Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:32:04.042Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 14ms
[32m[2025-05-23T15:32:07.028Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
[32m[2025-05-23T15:32:07.036Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 17ms
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
 GET /api/logs?t=1748014328890 200 in 12ms
[32m[2025-05-23T15:32:10.041Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:32:10.047Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 11ms
✅ Claude API response received
📋 Response content types: [ 'tool_use' ]
📄 Content 0: {
  type: 'tool_use',
  text: undefined,
  toolName: 'generate_code_changes'
}
🔧 DEBUG: Full tool input: {}
🔍 Claude tool response structure: {}
❌ Claude tool response missing files array: {}
❌ Error in code generation: Error: Invalid tool response: missing files array
    at ClaudeService.generateCode (src/lib/claude-service.ts:132:14)
    at async regenerateCodeAsync (src/app/api/tasks/[id]/regenerate/route.ts:118:19)
  130 |       if (!result.files || !Array.isArray(result.files)) {
  131 |         console.error('❌ Claude tool response missing files array:', result);
> 132 |         throw new Error('Invalid tool response: missing files array');
      |              ^
  133 |       }
  134 |       
  135 |       // CRITICAL VALIDATION: Check if suggested files actually exist in the repository context
📊 Error details: {
  message: 'Invalid tool response: missing files array',
  stack: 'Error: Invalid tool response: missing files array\n' +
    '    at ClaudeService.generateCode (webpack-internal:///(rsc)/./src/lib/claude-service.ts:143:23)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async regenerateCodeAsync (webpack-internal:///(rsc)/./src/app/api/tasks/[id]/regenerate/route.ts:150:24)',
  name: 'Error',
  status: undefined,
  response: undefined
}
[31m[2025-05-23T15:32:12.616Z] [ERROR] [CodeRegeneration] Error regenerating code[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp",
  "jobId": "cmb0yinko00016d7hktc50chv"
}
Error: Error: Failed to generate code: Invalid tool response: missing files array
    at ClaudeService.generateCode (src/lib/claude-service.ts:177:12)
    at async regenerateCodeAsync (src/app/api/tasks/[id]/regenerate/route.ts:118:19)
  175 |       
  176 |       // Re-throw with more context
> 177 |       throw new Error(`Failed to generate code: ${error instanceof Error ? error.message : 'Unknown error'}`);
      |            ^
  178 |     }
  179 |   }
  180 |
prisma:query UPDATE "public"."ClaudeJob" SET "status" = $1, "error" = $2 WHERE ("public"."ClaudeJob"."id" = $3 AND 1=1) RETURNING "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt"
prisma:query UPDATE "public"."Task" SET "status" = CAST($1::text AS "public"."TaskStatus"), "updatedAt" = $2 WHERE ("public"."Task"."id" = $3 AND 1=1) RETURNING "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl"
[32m[2025-05-23T15:32:13.031Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T15:32:13.046Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 24ms
 GET /api/logs?t=1748014388893 200 in 27ms
 GET /api/logs?t=1748014448892 200 in 29ms
 GET /api/logs?t=1748014508893 200 in 97ms
 GET /api/logs?t=1748014568894 200 in 39ms
 GET /api/logs?t=1748014628895 200 in 44ms
 GET /api/logs?t=1748014688899 200 in 83ms
 GET /api/logs?t=1748014748896 200 in 40ms
 GET /api/logs?t=1748014808894 200 in 59ms
 GET /api/logs?t=1748014868895 200 in 82ms
 GET /api/logs?t=1748014928893 200 in 28ms
 GET /api/logs?t=1748014988897 200 in 60ms
 GET /api/logs?t=1748015048898 200 in 94ms
 GET /api/logs?t=1748015108904 200 in 34ms
 GET /api/logs?t=1748015168899 200 in 45ms
 GET /api/logs?t=1748015228896 200 in 46ms
 GET /api/logs?t=1748015288897 200 in 55ms
 GET /api/logs?t=1748015348898 200 in 78ms
 GET /api/logs?t=1748015408899 200 in 39ms
 GET /api/logs?t=1748015468900 200 in 33ms
 GET /api/logs?t=1748015528904 200 in 36ms
 GET /api/logs?t=1748015588901 200 in 55ms
 GET /api/logs?t=1748015648902 200 in 29ms
 GET /api/logs?t=1748015708900 200 in 57ms
 GET /api/logs?t=1748015768908 200 in 71ms
 GET /api/logs?t=1748015828905 200 in 51ms
 GET /api/logs?t=1748015888900 200 in 107ms
 GET /api/logs?t=1748015948910 200 in 60ms
 GET /api/logs?t=1748016008912 200 in 38ms
 GET /api/logs?t=1748016068916 200 in 54ms
 GET /api/logs?t=1748016128919 200 in 132ms
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
 GET /tasks/cmb0uz46000176dfk83jjvrpp 200 in 210ms
🔍 DEBUG: Initialize called, current db status: null
🔍 DEBUG: Ensuring data directory exists: /Users/bentossell/codex/data
🔍 DEBUG: Opening database at: /Users/bentossell/codex/data/codebase-index.db
🔍 DEBUG: Database opened successfully
🔍 DEBUG: Creating tables...
🔍 DEBUG: Tables created
🧠 Loading embedding model...
✅ Embedding model ready
 GET /api/index?repository=bentossell%2Fbentossell 200 in 447ms
[32m[2025-05-23T16:02:27.360Z] [INFO] [API:Regenerate] Regenerating code for task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
prisma:query DELETE FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" = $1
prisma:query INSERT INTO "public"."ClaudeJob" ("id","taskId","prompt","model","status","generatedAt") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt"
[32m[2025-05-23T16:02:27.372Z] [INFO] [API:Regenerate] Starting code regeneration[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp",
  "jobId": "cmb0zojhk00036d7hb6nrnt7l"
}
[32m[2025-05-23T16:02:27.373Z] [INFO] [CodeRegeneration] Starting async code regeneration[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp",
  "jobId": "cmb0zojhk00036d7hb6nrnt7l"
}
 POST /api/tasks/cmb0uz46000176dfk83jjvrpp/regenerate 200 in 42ms
prisma:query UPDATE "public"."ClaudeJob" SET "status" = $1 WHERE ("public"."ClaudeJob"."id" = $2 AND 1=1) RETURNING "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt"
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
[32m[2025-05-23T16:02:27.377Z] [INFO] [CodeRegeneration] Calling Claude service[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
🔍 Starting code generation for task: cmb0uz46000176dfk83jjvrpp
📂 Fetching repository context...
🔧 DEBUG: About to call getRepositoryContext with: {
  repository: 'bentossell/bentossell',
  branch: 'main',
  description: "change the header topbar name 'ben tossell' to say 'claude code woz ere'"
}
🧠 Getting intelligent repository context for: bentossell/bentossell
🔧 Ensuring database initialization...
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 DEBUG: needsUpdate called for: bentossell/bentossell
🔍 DEBUG: Database status in needsUpdate: connected
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 Repo bentossell/bentossell: stored=b7b9240 current=b7b9240
✅ Using cached repository index
🔍 Advanced search parameters: {
  repository: 'bentossell/bentossell',
  taskDescription: "change the header topbar name 'ben tossell' to say 'claude code woz ere'",
  limit: 15
}
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 DEBUG: Starting search for: {
  repoName: 'bentossell/bentossell',
  taskDescription: "change the header topbar name 'ben tossell' to say 'claude code woz ere'",
  limit: 15
}
🔍 DEBUG: getOrCreateRepository called for: bentossell/bentossell
🔍 DEBUG: Database connection status: connected
🔍 DEBUG: Repository lookup result: { id: 1 }
🔍 DEBUG: Repository ID: 1
🔍 DEBUG: Generated task embedding, length: 384
🔍 DEBUG: Found files in database: 15
  📄 .cursor/environment.json (data)
  📄 BLOG.md (documentation)
  📄 README.md (documentation)
  📄 assets/css/styles.css (style)
  📄 assets/images/README.md (documentation)
  📄 blog/index.md (documentation)
  📄 blog/posts/2024-05-20-investment-philosophy.md (documentation)
  📄 blog/posts/2024-05-23-building-this-blog.md (documentation)
  📄 blog/posts/2025-05-23-building-with-ai-tools-in-2024.md (documentation)
  📄 create-post.js (script)
  📄 food.md (documentation)
  📄 index.html (page)
  📄 investments.md (documentation)
  📄 package.json (config)
  📄 tools.md (documentation)
🔍 DEBUG: Analyzing file: .cursor/environment.json
  📊 Base semantic score: -0.011
  🔍 Checking for quoted text: "ben tossell" in .cursor/environment.json
  ❌ "ben tossell" NOT found in .cursor/environment.json
  📊 Final score for .cursor/environment.json: -0.011 (reason: semantic similarity)
  ❌ Excluding .cursor/environment.json (score too low: -0.011)
🔍 DEBUG: Analyzing file: BLOG.md
  📊 Base semantic score: 0.069
  🔍 Checking for quoted text: "ben tossell" in BLOG.md
  🎯 FOUND "ben tossell" in BLOG.md, score boosted to 2.069
  📊 Final score for BLOG.md: 3.269 (reason: semantic similarity, contains exact text "ben tossell", contains "change", contains "header", contains "name", contains "code")
  ✅ Adding BLOG.md to results
🔍 DEBUG: Analyzing file: README.md
  📊 Base semantic score: 0.136
  🔍 Checking for quoted text: "ben tossell" in README.md
  ❌ "ben tossell" NOT found in README.md
  📊 Final score for README.md: 0.436 (reason: semantic similarity, contains "code")
  ✅ Adding README.md to results
🔍 DEBUG: Analyzing file: assets/css/styles.css
  📊 Base semantic score: 0.299
  🔍 Checking for quoted text: "ben tossell" in assets/css/styles.css
  🎯 FOUND "ben tossell" in assets/css/styles.css, score boosted to 2.299
  📊 Final score for assets/css/styles.css: 3.499 (reason: semantic similarity, contains exact text "ben tossell", contains "header", contains "topbar", contains "tossell'", contains "code")
  ✅ Adding assets/css/styles.css to results
🔍 DEBUG: Analyzing file: assets/images/README.md
  📊 Base semantic score: 0.241
  🔍 Checking for quoted text: "ben tossell" in assets/images/README.md
  🎯 FOUND "ben tossell" in assets/images/README.md, score boosted to 2.241
  📊 Final score for assets/images/README.md: 2.841 (reason: semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'")
  ✅ Adding assets/images/README.md to results
🔍 DEBUG: Analyzing file: blog/index.md
  📊 Base semantic score: -0.033
  🔍 Checking for quoted text: "ben tossell" in blog/index.md
  ❌ "ben tossell" NOT found in blog/index.md
  📊 Final score for blog/index.md: -0.033 (reason: semantic similarity)
  ❌ Excluding blog/index.md (score too low: -0.033)
🔍 DEBUG: Analyzing file: blog/posts/2024-05-20-investment-philosophy.md
  📊 Base semantic score: 0.035
  🔍 Checking for quoted text: "ben tossell" in blog/posts/2024-05-20-investment-philosophy.md
  🎯 FOUND "ben tossell" in blog/posts/2024-05-20-investment-philosophy.md, score boosted to 2.035
  📊 Final score for blog/posts/2024-05-20-investment-philosophy.md: 2.035 (reason: semantic similarity, contains exact text "ben tossell")
  ✅ Adding blog/posts/2024-05-20-investment-philosophy.md to results
🔍 DEBUG: Analyzing file: blog/posts/2024-05-23-building-this-blog.md
  📊 Base semantic score: 0.150
  🔍 Checking for quoted text: "ben tossell" in blog/posts/2024-05-23-building-this-blog.md
  🎯 FOUND "ben tossell" in blog/posts/2024-05-23-building-this-blog.md, score boosted to 2.150
  📊 Final score for blog/posts/2024-05-23-building-this-blog.md: 2.450 (reason: semantic similarity, contains exact text "ben tossell", contains "code")
  ✅ Adding blog/posts/2024-05-23-building-this-blog.md to results
🔍 DEBUG: Analyzing file: blog/posts/2025-05-23-building-with-ai-tools-in-2024.md
  📊 Base semantic score: 0.218
  🔍 Checking for quoted text: "ben tossell" in blog/posts/2025-05-23-building-with-ai-tools-in-2024.md
  🎯 FOUND "ben tossell" in blog/posts/2025-05-23-building-with-ai-tools-in-2024.md, score boosted to 2.218
  📊 Final score for blog/posts/2025-05-23-building-with-ai-tools-in-2024.md: 3.118 (reason: semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  ✅ Adding blog/posts/2025-05-23-building-with-ai-tools-in-2024.md to results
🔍 DEBUG: Analyzing file: create-post.js
  📊 Base semantic score: 0.068
  🔍 Checking for quoted text: "ben tossell" in create-post.js
  🎯 FOUND "ben tossell" in create-post.js, score boosted to 2.068
  📊 Final score for create-post.js: 2.968 (reason: semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  ✅ Adding create-post.js to results
🔍 DEBUG: Analyzing file: food.md
  📊 Base semantic score: 0.035
  🔍 Checking for quoted text: "ben tossell" in food.md
  ❌ "ben tossell" NOT found in food.md
  📊 Final score for food.md: 0.035 (reason: semantic similarity)
  ❌ Excluding food.md (score too low: 0.035)
🔍 DEBUG: Analyzing file: index.html
  📊 Base semantic score: 0.381
  🔍 Checking for quoted text: "ben tossell" in index.html
  🎯 FOUND "ben tossell" in index.html, score boosted to 5.881
  📊 Final score for index.html: 7.681 (reason: semantic similarity, main HTML file for UI change, HTML file, contains exact text "ben tossell", contains "change", contains "header", contains "topbar", contains "name", contains "tossell'", contains "code")
  ✅ Adding index.html to results
🔍 DEBUG: Analyzing file: investments.md
  📊 Base semantic score: 0.055
  🔍 Checking for quoted text: "ben tossell" in investments.md
  ❌ "ben tossell" NOT found in investments.md
  📊 Final score for investments.md: 0.055 (reason: semantic similarity)
  ❌ Excluding investments.md (score too low: 0.055)
🔍 DEBUG: Analyzing file: package.json
  📊 Base semantic score: 0.196
  🔍 Checking for quoted text: "ben tossell" in package.json
  🎯 FOUND "ben tossell" in package.json, score boosted to 2.196
  📊 Final score for package.json: 2.996 (reason: semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'", essential config)
  ✅ Adding package.json to results
🔍 DEBUG: Analyzing file: tools.md
  📊 Base semantic score: 0.239
  🔍 Checking for quoted text: "ben tossell" in tools.md
  ❌ "ben tossell" NOT found in tools.md
  📊 Final score for tools.md: 0.539 (reason: semantic similarity, contains "code")
  ✅ Adding tools.md to results
🔍 DEBUG: Final search results:
  🏆 index.html - Score: 7.681 - semantic similarity, main HTML file for UI change, HTML file, contains exact text "ben tossell", contains "change", contains "header", contains "topbar", contains "name", contains "tossell'", contains "code"
  🏆 assets/css/styles.css - Score: 3.499 - semantic similarity, contains exact text "ben tossell", contains "header", contains "topbar", contains "tossell'", contains "code"
  🏆 BLOG.md - Score: 3.269 - semantic similarity, contains exact text "ben tossell", contains "change", contains "header", contains "name", contains "code"
  🏆 blog/posts/2025-05-23-building-with-ai-tools-in-2024.md - Score: 3.118 - semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code"
  🏆 package.json - Score: 2.996 - semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'", essential config
  🏆 create-post.js - Score: 2.968 - semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code"
  🏆 assets/images/README.md - Score: 2.841 - semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'"
  🏆 blog/posts/2024-05-23-building-this-blog.md - Score: 2.450 - semantic similarity, contains exact text "ben tossell", contains "code"
  🏆 blog/posts/2024-05-20-investment-philosophy.md - Score: 2.035 - semantic similarity, contains exact text "ben tossell"
  🏆 tools.md - Score: 0.539 - semantic similarity, contains "code"
  🏆 README.md - Score: 0.436 - semantic similarity, contains "code"
🎯 Found 11 relevant files for task: "change the header topbar name 'ben tossell' to say 'claude code woz ere'"
  - index.html (page, score: 7.68, semantic similarity, main HTML file for UI change, HTML file, contains exact text "ben tossell", contains "change", contains "header", contains "topbar", contains "name", contains "tossell'", contains "code")
  - assets/css/styles.css (style, score: 3.50, semantic similarity, contains exact text "ben tossell", contains "header", contains "topbar", contains "tossell'", contains "code")
  - BLOG.md (documentation, score: 3.27, semantic similarity, contains exact text "ben tossell", contains "change", contains "header", contains "name", contains "code")
  - blog/posts/2025-05-23-building-with-ai-tools-in-2024.md (documentation, score: 3.12, semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  - package.json (config, score: 3.00, semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'", essential config)
  - create-post.js (script, score: 2.97, semantic similarity, contains exact text "ben tossell", contains "change", contains "name", contains "code")
  - assets/images/README.md (documentation, score: 2.84, semantic similarity, contains exact text "ben tossell", contains "name", contains "tossell'")
  - blog/posts/2024-05-23-building-this-blog.md (documentation, score: 2.45, semantic similarity, contains exact text "ben tossell", contains "code")
  - blog/posts/2024-05-20-investment-philosophy.md (documentation, score: 2.03, semantic similarity, contains exact text "ben tossell")
  - tools.md (documentation, score: 0.54, semantic similarity, contains "code")
  - README.md (documentation, score: 0.44, semantic similarity, contains "code")

🔍 Debug - Files containing "ben tossell":
🔍 DEBUG: getAllFiles called for: bentossell/bentossell
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
🔍 DEBUG: getOrCreateRepository called for: bentossell/bentossell
🔍 DEBUG: Database connection status: connected
🔍 DEBUG: Repository lookup result: { id: 1 }
  ✅ BLOG.md - contains "ben tossell"
  ✅ assets/css/styles.css - contains "ben tossell"
  ✅ assets/images/README.md - contains "ben tossell"
  ✅ blog/posts/2024-05-20-investment-philosophy.md - contains "ben tossell"
  ✅ blog/posts/2024-05-23-building-this-blog.md - contains "ben tossell"
  ✅ blog/posts/2025-05-23-building-with-ai-tools-in-2024.md - contains "ben tossell"
  ✅ create-post.js - contains "ben tossell"
  ✅ index.html - contains "ben tossell"
  ✅ package.json - contains "ben tossell"
🔍 DEBUG: Initialize called, current db status: exists
🔍 DEBUG: Database already initialized, skipping
✅ Smart context ready: 11 relevant files selected
🔍 DEBUG: Final mainFiles being sent to Claude:
  📄 index.html (24857 chars)
  📄 assets/css/styles.css (18368 chars)
  📄 BLOG.md (3462 chars)
  📄 blog/posts/2025-05-23-building-with-ai-tools-in-2024.md (3730 chars)
  📄 package.json (443 chars)
  📄 create-post.js (5006 chars)
  📄 assets/images/README.md (1195 chars)
  📄 blog/posts/2024-05-23-building-this-blog.md (1762 chars)
  📄 blog/posts/2024-05-20-investment-philosophy.md (2102 chars)
  📄 tools.md (116 chars)
  📄 README.md (627 chars)
✅ Repository context fetched successfully
🔧 DEBUG: Repository context result: {
  structureLength: 5,
  hasPackageJson: true,
  mainFilesCount: 11,
  readme: 'bentossell/bentossell - 15 files indexed, last updated 2025-05-23T14:35:00.486Z...'
}
📝 Generated prompt for Claude
🔧 DEBUG: Prompt includes files: index.html, assets/css/styles.css, BLOG.md, blog/posts/2025-05-23-building-with-ai-tools-in-2024.md, package.json, create-post.js, assets/images/README.md, blog/posts/2024-05-23-building-this-blog.md, blog/posts/2024-05-20-investment-philosophy.md, tools.md, README.md
🔧 DEBUG: Prompt length: 64736
🤖 Calling Claude API...
[32m[2025-05-23T16:02:28.401Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:28.410Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 20ms
 GET /api/logs?t=1748016148594 200 in 36ms
 GET /api/logs?t=1748016149158 200 in 18ms
 GET /api/logs?t=1748016150159 200 in 23ms
 GET /api/logs?t=1748016151159 200 in 14ms
[32m[2025-05-23T16:02:31.946Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:31.950Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 17ms
 GET /api/logs?t=1748016152157 200 in 5ms
 GET /api/logs?t=1748016153158 200 in 18ms
 GET /api/logs?t=1748016154158 200 in 15ms
[32m[2025-05-23T16:02:34.937Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:34.941Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 9ms
 GET /api/logs?t=1748016155158 200 in 4ms
 GET /api/logs?t=1748016156158 200 in 11ms
[32m[2025-05-23T16:02:37.450Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:37.454Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 15ms
 GET /api/logs?t=1748016157912 200 in 5ms
 GET /api/logs?t=1748016158911 200 in 9ms
 GET /api/logs?t=1748016159912 200 in 11ms
[32m[2025-05-23T16:02:40.449Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:40.453Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 9ms
 GET /api/logs?t=1748016160912 200 in 5ms
 GET /api/logs?t=1748016161912 200 in 14ms
 GET /api/logs?t=1748016162912 200 in 5ms
[32m[2025-05-23T16:02:43.439Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:43.441Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 7ms
 GET /api/logs?t=1748016163911 200 in 8ms
 GET /api/logs?t=1748016164911 200 in 10ms
 GET /api/logs?t=1748016165911 200 in 11ms
[32m[2025-05-23T16:02:46.441Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:46.444Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 8ms
 GET /api/logs?t=1748016166911 200 in 5ms
 GET /api/logs?t=1748016167911 200 in 12ms
 GET /api/logs?t=1748016168912 200 in 13ms
[32m[2025-05-23T16:02:49.439Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:49.443Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 9ms
 GET /api/logs?t=1748016169911 200 in 9ms
 GET /api/logs?t=1748016170911 200 in 26ms
 GET /api/logs?t=1748016171158 200 in 10ms
 GET /api/logs?t=1748016172158 200 in 16ms
[32m[2025-05-23T16:02:52.950Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:52.961Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 20ms
 GET /api/logs?t=1748016173158 200 in 4ms
 GET /api/logs?t=1748016174159 200 in 15ms
 GET /api/logs?t=1748016175158 200 in 14ms
[32m[2025-05-23T16:02:55.940Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:55.945Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 14ms
 GET /api/logs?t=1748016176159 200 in 6ms
 GET /api/logs?t=1748016177159 200 in 17ms
 GET /api/logs?t=1748016178159 200 in 16ms
[32m[2025-05-23T16:02:58.944Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:02:58.948Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 10ms
 GET /api/logs?t=1748016179158 200 in 4ms
 GET /api/logs?t=1748016180159 200 in 16ms
 GET /api/logs?t=1748016181158 200 in 12ms
 GET /api/logs?t=1748016182159 200 in 12ms
 GET /api/logs?t=1748016183159 200 in 19ms
 GET /api/logs?t=1748016184158 200 in 14ms
 GET /api/logs?t=1748016185159 200 in 19ms
 GET /api/logs?t=1748016186159 200 in 10ms
 GET /api/logs?t=1748016187159 200 in 16ms
 GET /api/logs?t=1748016188159 200 in 13ms
 GET /api/logs?t=1748016189160 200 in 71ms
 GET /api/logs?t=1748016190457 200 in 97ms
 GET /api/logs?t=1748016191407 200 in 101ms
 GET /api/logs?t=1748016192158 200 in 112ms
 GET /api/logs?t=1748016193158 200 in 15ms
 GET /api/logs?t=1748016194159 200 in 21ms
 GET /api/logs?t=1748016195159 200 in 11ms
 GET /api/logs?t=1748016196159 200 in 13ms
 GET /api/logs?t=1748016197159 200 in 13ms
 GET /api/logs?t=1748016198159 200 in 17ms
 GET /api/logs?t=1748016199158 200 in 15ms
 GET /api/logs?t=1748016200159 200 in 20ms
 GET /api/logs?t=1748016201159 200 in 13ms
 GET /api/logs?t=1748016202159 200 in 26ms
 GET /api/logs?t=1748016203159 200 in 10ms
 GET /api/logs?t=1748016204159 200 in 18ms
 GET /api/logs?t=1748016205158 200 in 18ms
 GET /api/logs?t=1748016206159 200 in 14ms
 GET /api/logs?t=1748016207159 200 in 16ms
 GET /api/logs?t=1748016208159 200 in 18ms
 GET /api/logs?t=1748016209159 200 in 18ms
 GET /api/logs?t=1748016210159 200 in 14ms
 GET /api/logs?t=1748016211158 200 in 16ms
 GET /api/logs?t=1748016212158 200 in 13ms
 GET /api/logs?t=1748016213159 200 in 15ms
 GET /api/logs?t=1748016214159 200 in 16ms
 GET /api/logs?t=1748016215159 200 in 12ms
 GET /api/logs?t=1748016216158 200 in 13ms
 GET /api/logs?t=1748016217158 200 in 16ms
 GET /api/logs?t=1748016218159 200 in 12ms
 GET /api/logs?t=1748016219159 200 in 14ms
 GET /api/logs?t=1748016220158 200 in 19ms
 GET /api/logs?t=1748016221159 200 in 15ms
 GET /api/logs?t=1748016222158 200 in 16ms
 GET /api/logs?t=1748016223159 200 in 18ms
 GET /api/logs?t=1748016224159 200 in 13ms
 GET /api/logs?t=1748016225158 200 in 13ms
 GET /api/logs?t=1748016226160 200 in 16ms
 GET /api/logs?t=1748016227159 200 in 18ms
 GET /api/logs?t=1748016228160 200 in 14ms
 GET /api/logs?t=1748016229159 200 in 19ms
 GET /api/logs?t=1748016230159 200 in 17ms
 GET /api/logs?t=1748016231159 200 in 13ms
 GET /api/logs?t=1748016232159 200 in 15ms
 GET /api/logs?t=1748016233159 200 in 15ms
 GET /api/logs?t=1748016234159 200 in 11ms
 GET /api/logs?t=1748016235159 200 in 13ms
 GET /api/logs?t=1748016236160 200 in 12ms
 GET /api/logs?t=1748016237159 200 in 16ms
 GET /api/logs?t=1748016238159 200 in 16ms
 GET /api/logs?t=1748016239159 200 in 17ms
 GET /api/logs?t=1748016240160 200 in 15ms
 GET /api/logs?t=1748016241159 200 in 13ms
 GET /api/logs?t=1748016242159 200 in 18ms
 GET /api/logs?t=1748016243159 200 in 15ms
 GET /api/logs?t=1748016244158 200 in 15ms
 GET /api/logs?t=1748016245160 200 in 16ms
 GET /api/logs?t=1748016246158 200 in 11ms
 GET /api/logs?t=1748016247160 200 in 15ms
 GET /api/logs?t=1748016248160 200 in 14ms
 GET /api/logs?t=1748016249159 200 in 11ms
 GET /api/logs?t=1748016250158 200 in 14ms
 GET /api/logs?t=1748016251159 200 in 19ms
 GET /api/logs?t=1748016252159 200 in 16ms
 GET /api/logs?t=1748016253160 200 in 18ms
 GET /api/logs?t=1748016254159 200 in 13ms
 GET /api/logs?t=1748016255159 200 in 16ms
 GET /api/logs?t=1748016256160 200 in 14ms
 GET /api/logs?t=1748016257159 200 in 15ms
 GET /api/logs?t=1748016258159 200 in 17ms
 GET /api/logs?t=1748016259159 200 in 17ms
 GET /api/logs?t=1748016260159 200 in 16ms
 GET /api/logs?t=1748016261159 200 in 18ms
 GET /api/logs?t=1748016262158 200 in 14ms
 GET /api/logs?t=1748016263159 200 in 19ms
 GET /api/logs?t=1748016264160 200 in 11ms
 GET /api/logs?t=1748016265160 200 in 15ms
 GET /api/logs?t=1748016266159 200 in 15ms
 GET /api/logs?t=1748016267160 200 in 17ms
 GET /api/logs?t=1748016268159 200 in 18ms
 GET /api/logs?t=1748016269159 200 in 17ms
 GET /api/logs?t=1748016270159 200 in 16ms
 GET /api/logs?t=1748016271159 200 in 16ms
 GET /api/logs?t=1748016272159 200 in 16ms
 GET /api/logs?t=1748016273160 200 in 16ms
 GET /api/logs?t=1748016274160 200 in 17ms
 GET /api/logs?t=1748016275160 200 in 16ms
 GET /api/logs?t=1748016276160 200 in 12ms
✅ Claude API response received
📋 Response content types: [ 'tool_use' ]
📄 Content 0: {
  type: 'tool_use',
  text: undefined,
  toolName: 'generate_code_changes'
}
🔧 DEBUG: Full tool input: {}
🔍 Claude tool response structure: {}
❌ Claude tool response missing files array: {}
❌ Error in code generation: Error: Invalid tool response: missing files array
    at ClaudeService.generateCode (src/lib/claude-service.ts:132:14)
    at async regenerateCodeAsync (src/app/api/tasks/[id]/regenerate/route.ts:118:19)
  130 |       if (!result.files || !Array.isArray(result.files)) {
  131 |         console.error('❌ Claude tool response missing files array:', result);
> 132 |         throw new Error('Invalid tool response: missing files array');
      |              ^
  133 |       }
  134 |       
  135 |       // CRITICAL VALIDATION: Check if suggested files actually exist in the repository context
📊 Error details: {
  message: 'Invalid tool response: missing files array',
  stack: 'Error: Invalid tool response: missing files array\n' +
    '    at ClaudeService.generateCode (webpack-internal:///(rsc)/./src/lib/claude-service.ts:143:23)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async regenerateCodeAsync (webpack-internal:///(rsc)/./src/app/api/tasks/[id]/regenerate/route.ts:150:24)',
  name: 'Error',
  status: undefined,
  response: undefined
}
[31m[2025-05-23T16:04:36.973Z] [ERROR] [CodeRegeneration] Error regenerating code[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp",
  "jobId": "cmb0zojhk00036d7hb6nrnt7l"
}
Error: Error: Failed to generate code: Invalid tool response: missing files array
    at ClaudeService.generateCode (src/lib/claude-service.ts:177:12)
    at async regenerateCodeAsync (src/app/api/tasks/[id]/regenerate/route.ts:118:19)
  175 |       
  176 |       // Re-throw with more context
> 177 |       throw new Error(`Failed to generate code: ${error instanceof Error ? error.message : 'Unknown error'}`);
      |            ^
  178 |     }
  179 |   }
  180 |
prisma:query SELECT 1
prisma:query UPDATE "public"."ClaudeJob" SET "status" = $1, "error" = $2 WHERE ("public"."ClaudeJob"."id" = $3 AND 1=1) RETURNING "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt"
prisma:query UPDATE "public"."Task" SET "status" = CAST($1::text AS "public"."TaskStatus"), "updatedAt" = $2 WHERE ("public"."Task"."id" = $3 AND 1=1) RETURNING "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl"
 GET /api/logs?t=1748016277160 200 in 13ms
 GET /api/logs?t=1748016278160 200 in 14ms
 GET /api/logs?t=1748016279160 200 in 17ms
 GET /api/logs?t=1748016280160 200 in 16ms
 GET /api/logs?t=1748016281159 200 in 20ms
 GET /api/logs?t=1748016282160 200 in 16ms
 GET /api/logs?t=1748016283160 200 in 15ms
 GET /api/logs?t=1748016284160 200 in 17ms
 GET /api/logs?t=1748016285160 200 in 19ms
 GET /api/logs?t=1748016286159 200 in 16ms
 GET /api/logs?t=1748016287160 200 in 15ms
 GET /api/logs?t=1748016288159 200 in 15ms
 GET /api/logs?t=1748016289160 200 in 14ms
 GET /api/logs?t=1748016290160 200 in 14ms
 GET /api/logs?t=1748016291160 200 in 10ms
 GET /api/logs?t=1748016292159 200 in 14ms
 GET /api/logs?t=1748016293159 200 in 18ms
 GET /api/logs?t=1748016294160 200 in 15ms
 GET /api/logs?t=1748016295160 200 in 13ms
 GET /api/logs?t=1748016296160 200 in 13ms
 GET /api/logs?t=1748016297159 200 in 17ms
 GET /api/logs?t=1748016298160 200 in 20ms
 GET /api/logs?t=1748016299160 200 in 16ms
 GET /api/logs?t=1748016300159 200 in 13ms
 GET /api/logs?t=1748016301160 200 in 11ms
 GET /api/logs?t=1748016302160 200 in 17ms
 GET /api/logs?t=1748016303159 200 in 16ms
 GET /api/logs?t=1748016304160 200 in 18ms
 GET /api/logs?t=1748016305160 200 in 18ms
 GET /api/logs?t=1748016306160 200 in 12ms
 GET /api/logs?t=1748016307160 200 in 12ms
 GET /api/logs?t=1748016308160 200 in 15ms
 GET /api/logs?t=1748016309159 200 in 9ms
 GET /api/logs?t=1748016310160 200 in 13ms
 GET /api/logs?t=1748016311159 200 in 20ms
 GET /api/logs?t=1748016312160 200 in 15ms
 GET /api/logs?t=1748016313160 200 in 16ms
 GET /api/logs?t=1748016314160 200 in 15ms
 GET /api/logs?t=1748016315160 200 in 16ms
 GET /api/logs?t=1748016316160 200 in 16ms
 GET /api/logs?t=1748016317160 200 in 15ms
[32m[2025-05-23T16:05:17.884Z] [INFO] [API:Task:GET] Fetching task[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE ("public"."User"."githubId" = $1 OR "public"."User"."email" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."Task"."id", "public"."Task"."title", "public"."Task"."description", "public"."Task"."repository", "public"."Task"."branch", "public"."Task"."status"::text, "public"."Task"."authorId", "public"."Task"."metrics", "public"."Task"."createdAt", "public"."Task"."updatedAt", "public"."Task"."pullRequestNumber", "public"."Task"."pullRequestUrl" FROM "public"."Task" WHERE ("public"."Task"."id" = $1 AND "public"."Task"."authorId" = $2) LIMIT $3 OFFSET $4
prisma:query SELECT "public"."User"."id", "public"."User"."email", "public"."User"."name", "public"."User"."image", "public"."User"."githubId", "public"."User"."createdAt", "public"."User"."updatedAt" FROM "public"."User" WHERE "public"."User"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."CodeChange"."id", "public"."CodeChange"."taskId", "public"."CodeChange"."filePath", "public"."CodeChange"."action", "public"."CodeChange"."previousContent", "public"."CodeChange"."newContent", "public"."CodeChange"."diff", "public"."CodeChange"."approved", "public"."CodeChange"."appliedAt", "public"."CodeChange"."createdAt" FROM "public"."CodeChange" WHERE "public"."CodeChange"."taskId" IN ($1) OFFSET $2
prisma:query SELECT "public"."ClaudeJob"."id", "public"."ClaudeJob"."taskId", "public"."ClaudeJob"."prompt", "public"."ClaudeJob"."response", "public"."ClaudeJob"."model", "public"."ClaudeJob"."tokensUsed", "public"."ClaudeJob"."status", "public"."ClaudeJob"."error", "public"."ClaudeJob"."generatedAt" FROM "public"."ClaudeJob" WHERE "public"."ClaudeJob"."taskId" IN ($1) ORDER BY "public"."ClaudeJob"."generatedAt" DESC LIMIT $2 OFFSET $3
[32m[2025-05-23T16:05:17.913Z] [INFO] [API:Task:GET] Task fetched successfully[0m
Data: {
  "taskId": "cmb0uz46000176dfk83jjvrpp"
}
 GET /api/tasks/cmb0uz46000176dfk83jjvrpp 200 in 37ms
 GET /api/logs?t=1748016318160 200 in 4ms
 GET /api/logs?t=1748016319160 200 in 21ms
 GET /api/logs?t=1748016320160 200 in 15ms
 GET /api/logs?t=1748016321160 200 in 12ms
 GET /api/logs?t=1748016322159 200 in 17ms
 GET /api/logs?t=1748016323160 200 in 18ms
 GET /api/logs?t=1748016324160 200 in 11ms
 GET /api/logs?t=1748016325160 200 in 15ms
 GET /api/logs?t=1748016326160 200 in 12ms
 GET /api/logs?t=1748016327160 200 in 21ms
 GET /api/logs?t=1748016328161 200 in 17ms
 GET /api/logs?t=1748016329160 200 in 14ms
 GET /api/logs?t=1748016330161 200 in 17ms
 GET /api/logs?t=1748016331160 200 in 14ms
 GET /api/logs?t=1748016332160 200 in 15ms
 GET /api/logs?t=1748016333160 200 in 19ms
 GET /api/logs?t=1748016334160 200 in 15ms
 GET /api/logs?t=1748016335160 200 in 20ms
 GET /api/logs?t=1748016336160 200 in 13ms
 GET /api/logs?t=1748016337160 200 in 16ms
 GET /api/logs?t=1748016338159 200 in 14ms
 GET /api/logs?t=1748016339160 200 in 16ms
 GET /api/logs?t=1748016340161 200 in 15ms
 GET /api/logs?t=1748016341160 200 in 16ms
 GET /api/logs?t=1748016342160 200 in 16ms
 GET /api/logs?t=1748016343160 200 in 20ms
 GET /api/logs?t=1748016344160 200 in 15ms
 GET /api/logs?t=1748016345161 200 in 12ms
 GET /api/logs?t=1748016346160 200 in 16ms
 GET /api/logs?t=1748016347161 200 in 16ms
 GET /api/logs?t=1748016348160 200 in 11ms
 GET /api/logs?t=1748016349160 200 in 15ms
 GET /api/logs?t=1748016350160 200 in 16ms
 GET /api/logs?t=1748016351160 200 in 14ms
 GET /api/logs?t=1748016352160 200 in 19ms
 GET /api/logs?t=1748016353160 200 in 12ms
 GET /api/logs?t=1748016354159 200 in 22ms
 GET /api/logs?t=1748016355160 200 in 13ms
 GET /api/logs?t=1748016356160 200 in 14ms
 GET /api/logs?t=1748016357160 200 in 15ms
 GET /api/logs?t=1748016358160 200 in 13ms
 GET /api/logs?t=1748016359161 200 in 23ms
 GET /api/logs?t=1748016360160 200 in 14ms
 GET /api/logs?t=1748016361160 200 in 10ms
 GET /api/logs?t=1748016362160 200 in 16ms
 GET /api/logs?t=1748016363160 200 in 16ms
 GET /api/logs?t=1748016364161 200 in 12ms
 GET /api/logs?t=1748016365161 200 in 15ms
 GET /api/logs?t=1748016366161 200 in 12ms
 GET /api/logs?t=1748016367161 200 in 20ms
 GET /api/logs?t=1748016368161 200 in 11ms
 GET /api/logs?t=1748016369160 200 in 13ms
 GET /api/logs?t=1748016370160 200 in 13ms
 GET /api/logs?t=1748016371160 200 in 12ms
 GET /api/logs?t=1748016372160 200 in 19ms
 GET /api/logs?t=1748016373160 200 in 10ms
 GET /api/logs?t=1748016374161 200 in 17ms
 GET /api/logs?t=1748016375160 200 in 21ms
 GET /api/logs?t=1748016376161 200 in 19ms
 GET /api/logs?t=1748016377161 200 in 17ms
 GET /api/logs?t=1748016378160 200 in 20ms
 GET /api/logs?t=1748016379161 200 in 15ms
 GET /api/logs?t=1748016380161 200 in 17ms
 GET /api/logs?t=1748016381161 200 in 13ms
 GET /api/logs?t=1748016382160 200 in 16ms
 GET /api/logs?t=1748016383161 200 in 23ms
 GET /api/logs?t=1748016384160 200 in 13ms
 GET /api/logs?t=1748016385161 200 in 13ms
 GET /api/logs?t=1748016386161 200 in 11ms
 GET /api/logs?t=1748016387160 200 in 18ms
 GET /api/logs?t=1748016388160 200 in 14ms
 GET /api/logs?t=1748016389160 200 in 14ms
 GET /api/logs?t=1748016390161 200 in 16ms
 GET /api/logs?t=1748016391160 200 in 22ms
 GET /api/logs?t=1748016392160 200 in 16ms
 GET /api/logs?t=1748016393160 200 in 16ms
 GET /api/logs?t=1748016394161 200 in 14ms
 GET /api/logs?t=1748016395161 200 in 16ms
 GET /api/logs?t=1748016396161 200 in 14ms
 GET /api/logs?t=1748016397161 200 in 23ms
 GET /api/logs?t=1748016398160 200 in 11ms
 GET /api/logs?t=1748016399161 200 in 21ms
 GET /api/logs?t=1748016400160 200 in 17ms
 GET /api/logs?t=1748016401160 200 in 16ms
 GET /api/logs?t=1748016402161 200 in 16ms
 GET /api/logs?t=1748016403160 200 in 16ms
 GET /api/logs?t=1748016404161 200 in 10ms
 GET /api/logs?t=1748016405161 200 in 15ms
 GET /api/logs?t=1748016406161 200 in 17ms
 GET /api/logs?t=1748016407161 200 in 15ms
 GET /api/logs?t=1748016408160 200 in 16ms
 GET /api/logs?t=1748016409161 200 in 15ms
 GET /api/logs?t=1748016410161 200 in 17ms
 GET /api/logs?t=1748016411161 200 in 13ms
 GET /api/logs?t=1748016412160 200 in 14ms
 GET /api/logs?t=1748016413160 200 in 16ms
 GET /api/logs?t=1748016414160 200 in 21ms
 GET /api/logs?t=1748016415161 200 in 17ms
 GET /api/logs?t=1748016416161 200 in 12ms
 GET /api/logs?t=1748016417161 200 in 16ms
 GET /api/logs?t=1748016418161 200 in 16ms
 GET /api/logs?t=1748016419161 200 in 17ms
 GET /api/logs?t=1748016420160 200 in 13ms
 GET /api/logs?t=1748016421161 200 in 13ms
 GET /api/logs?t=1748016422160 200 in 19ms
 GET /api/logs?t=1748016423161 200 in 19ms
 GET /api/logs?t=1748016424161 200 in 14ms
 GET /api/logs?t=1748016425161 200 in 15ms
 GET /api/logs?t=1748016426161 200 in 12ms
 GET /api/logs?t=1748016427161 200 in 15ms
 GET /api/logs?t=1748016428161 200 in 11ms
 GET /api/logs?t=1748016429161 200 in 12ms
 GET /api/logs?t=1748016430161 200 in 14ms
 GET /api/logs?t=1748016431161 200 in 37ms
 GET /api/logs?t=1748016432162 200 in 21ms
 GET /api/logs?t=1748016433161 200 in 16ms
 GET /api/logs?t=1748016434162 200 in 12ms
 GET /api/logs?t=1748016435161 200 in 17ms
 GET /api/logs?t=1748016436161 200 in 15ms
 GET /api/logs?t=1748016437161 200 in 16ms
 GET /api/logs?t=1748016438161 200 in 16ms
 GET /api/logs?t=1748016439161 200 in 19ms
 GET /api/logs?t=1748016440161 200 in 15ms
 GET /api/logs?t=1748016441161 200 in 13ms
 GET /api/logs?t=1748016442161 200 in 16ms
 GET /api/logs?t=1748016443161 200 in 17ms
 GET /api/logs?t=1748016444161 200 in 11ms
 GET /api/logs?t=1748016445161 200 in 14ms
 GET /api/logs?t=1748016446161 200 in 13ms
 GET /api/logs?t=1748016447161 200 in 17ms
 GET /api/logs?t=1748016448162 200 in 16ms
 GET /api/logs?t=1748016449161 200 in 18ms
 GET /api/logs?t=1748016450161 200 in 15ms
 GET /api/logs?t=1748016451161 200 in 17ms
 GET /api/logs?t=1748016452161 200 in 16ms
 GET /api/logs?t=1748016453160 200 in 16ms
 GET /api/logs?t=1748016454161 200 in 16ms
 GET /api/logs?t=1748016455161 200 in 18ms
 GET /api/logs?t=1748016456162 200 in 13ms
 GET /api/logs?t=1748016457161 200 in 17ms
 GET /api/logs?t=1748016458162 200 in 10ms
 GET /api/logs?t=1748016459161 200 in 15ms
 GET /api/logs?t=1748016460161 200 in 14ms
 GET /api/logs?t=1748016461162 200 in 16ms
 GET /api/logs?t=1748016462161 200 in 15ms
 GET /api/logs?t=1748016463161 200 in 18ms
 GET /api/logs?t=1748016464161 200 in 12ms
 GET /api/logs?t=1748016465161 200 in 15ms
 GET /api/logs?t=1748016466162 200 in 16ms
 GET /api/logs?t=1748016467161 200 in 16ms
 GET /api/logs?t=1748016468162 200 in 16ms
 GET /api/logs?t=1748016469161 200 in 15ms
 GET /api/logs?t=1748016470161 200 in 16ms
 GET /api/logs?t=1748016471162 200 in 13ms
 GET /api/logs?t=1748016472162 200 in 16ms
 GET /api/logs?t=1748016473163 200 in 19ms
 GET /api/logs?t=1748016474163 200 in 16ms
 GET /api/logs?t=1748016475163 200 in 14ms
 GET /api/logs?t=1748016476163 200 in 12ms
 GET /api/logs?t=1748016477162 200 in 14ms
 GET /api/logs?t=1748016478162 200 in 16ms
 GET /api/logs?t=1748016479162 200 in 17ms
 GET /api/logs?t=1748016480162 200 in 16ms
 GET /api/logs?t=1748016481162 200 in 10ms
 GET /api/logs?t=1748016482163 200 in 16ms
 GET /api/logs?t=1748016483163 200 in 16ms
 GET /api/logs?t=1748016484163 200 in 15ms
 GET /api/logs?t=1748016485163 200 in 17ms
 GET /api/logs?t=1748016486162 200 in 10ms
 GET /api/logs?t=1748016487161 200 in 20ms
 GET /api/logs?t=1748016488163 200 in 12ms
 GET /api/logs?t=1748016489162 200 in 14ms
 GET /api/logs?t=1748016490161 200 in 15ms
 GET /api/logs?t=1748016491162 200 in 17ms
 GET /api/logs?t=1748016492162 200 in 15ms
 GET /api/logs?t=1748016493163 200 in 16ms
 GET /api/logs?t=1748016494161 200 in 11ms
 GET /api/logs?t=1748016495161 200 in 20ms
 GET /api/logs?t=1748016496161 200 in 16ms
 GET /api/logs?t=1748016497162 200 in 14ms
 GET /api/logs?t=1748016498161 200 in 18ms
 GET /api/logs?t=1748016499163 200 in 17ms
 GET /api/logs?t=1748016500163 200 in 15ms
 GET /api/logs?t=1748016501162 200 in 12ms
 GET /api/logs?t=1748016502163 200 in 17ms
 GET /api/logs?t=1748016503162 200 in 20ms
 GET /api/logs?t=1748016504162 200 in 21ms
 GET /api/logs?t=1748016505163 200 in 14ms
 GET /api/logs?t=1748016506163 200 in 13ms
 GET /api/logs?t=1748016507163 200 in 15ms
 GET /api/logs?t=1748016508162 200 in 17ms
 GET /api/logs?t=1748016509163 200 in 16ms
 GET /api/logs?t=1748016510163 200 in 15ms
 GET /api/logs?t=1748016511163 200 in 21ms
 GET /api/logs?t=1748016512163 200 in 17ms
 GET /api/logs?t=1748016513163 200 in 18ms
 GET /api/logs?t=1748016514163 200 in 17ms
 GET /api/logs?t=1748016515161 200 in 16ms
 GET /api/logs?t=1748016516163 200 in 13ms
 GET /api/logs?t=1748016517161 200 in 18ms
 GET /api/logs?t=1748016518163 200 in 14ms
 GET /api/logs?t=1748016519163 200 in 23ms
 GET /api/logs?t=1748016520163 200 in 19ms
 GET /api/logs?t=1748016521161 200 in 16ms
 GET /api/logs?t=1748016522163 200 in 16ms
 GET /api/logs?t=1748016523163 200 in 16ms
 GET /api/logs?t=1748016524163 200 in 8ms
 GET /api/logs?t=1748016525163 200 in 16ms
 GET /api/logs?t=1748016526163 200 in 16ms
 GET /api/logs?t=1748016527161 200 in 24ms
 GET /api/logs?t=1748016528162 200 in 15ms
 GET /api/logs?t=1748016529164 200 in 16ms
 GET /api/logs?t=1748016530161 200 in 14ms
 GET /api/logs?t=1748016531162 200 in 12ms
 GET /api/logs?t=1748016532162 200 in 16ms
 GET /api/logs?t=1748016533163 200 in 16ms
 GET /api/logs?t=1748016534163 200 in 15ms
 GET /api/logs?t=1748016535163 200 in 14ms
 GET /api/logs?t=1748016536163 200 in 13ms
 GET /api/logs?t=1748016537163 200 in 12ms
 GET /api/logs?t=1748016538161 200 in 16ms
 GET /api/logs?t=1748016539163 200 in 15ms
 GET /api/logs?t=1748016540164 200 in 15ms
 GET /api/logs?t=1748016541162 200 in 14ms
 GET /api/logs?t=1748016542163 200 in 12ms
 GET /api/logs?t=1748016543163 200 in 20ms
 GET /api/logs?t=1748016544164 200 in 17ms
 GET /api/logs?t=1748016545163 200 in 16ms
 GET /api/logs?t=1748016546163 200 in 14ms
 GET /api/logs?t=1748016547164 200 in 18ms
 GET /api/logs?t=1748016548163 200 in 11ms
 GET /api/logs?t=1748016549162 200 in 11ms
 GET /api/logs?t=1748016550163 200 in 16ms
 GET /api/logs?t=1748016551162 200 in 20ms
 GET /api/logs?t=1748016552163 200 in 16ms
 GET /api/logs?t=1748016553163 200 in 20ms
 GET /api/logs?t=1748016554164 200 in 14ms
 GET /api/logs?t=1748016555161 200 in 16ms
 GET /api/logs?t=1748016556163 200 in 15ms
 GET /api/logs?t=1748016557163 200 in 17ms
 GET /api/logs?t=1748016558163 200 in 16ms
 GET /api/logs?t=1748016559163 200 in 18ms
 GET /api/logs?t=1748016560163 200 in 13ms
 GET /api/logs?t=1748016561164 200 in 13ms
 GET /api/logs?t=1748016562163 200 in 17ms
 GET /api/logs?t=1748016563162 200 in 15ms
 GET /api/logs?t=1748016564164 200 in 12ms
 GET /api/logs?t=1748016565163 200 in 16ms
 GET /api/logs?t=1748016566163 200 in 13ms
 GET /api/logs?t=1748016567164 200 in 25ms
 GET /api/logs?t=1748016568163 200 in 17ms
 GET /api/logs?t=1748016569163 200 in 15ms
 GET /api/logs?t=1748016570164 200 in 19ms
 GET /api/logs?t=1748016571164 200 in 17ms
 GET /api/logs?t=1748016572163 200 in 17ms
 GET /api/logs?t=1748016573162 200 in 18ms
 GET /api/logs?t=1748016574164 200 in 16ms
 GET /api/logs?t=1748016575164 200 in 18ms
 GET /api/logs?t=1748016576164 200 in 15ms
 GET /api/logs?t=1748016577163 200 in 16ms
 GET /api/logs?t=1748016578164 200 in 8ms
 GET /api/logs?t=1748016579163 200 in 16ms
 GET /api/logs?t=1748016580164 200 in 18ms
 GET /api/logs?t=1748016581164 200 in 18ms
 GET /api/logs?t=1748016582164 200 in 17ms
 GET /api/logs?t=1748016583163 200 in 18ms
 GET /api/logs?t=1748016584163 200 in 14ms
 GET /api/logs?t=1748016585163 200 in 15ms
 GET /api/logs?t=1748016586163 200 in 17ms
 GET /api/logs?t=1748016587164 200 in 18ms
 GET /api/logs?t=1748016588163 200 in 16ms
 GET /api/logs?t=1748016589161 200 in 16ms
 GET /api/logs?t=1748016590164 200 in 17ms
 GET /api/logs?t=1748016591163 200 in 14ms
 GET /api/logs?t=1748016592163 200 in 17ms
 GET /api/logs?t=1748016593163 200 in 15ms
 GET /api/logs?t=1748016594164 200 in 19ms
 GET /api/logs?t=1748016595163 200 in 10ms
 GET /api/logs?t=1748016596163 200 in 14ms
 GET /api/logs?t=1748016597164 200 in 18ms
 GET /api/logs?t=1748016598163 200 in 24ms
 GET /api/logs?t=1748016599162 200 in 19ms
 GET /api/logs?t=1748016600164 200 in 15ms
 GET /api/logs?t=1748016601162 200 in 12ms
 GET /api/logs?t=1748016602164 200 in 16ms
 GET /api/logs?t=1748016603164 200 in 16ms
 GET /api/logs?t=1748016604164 200 in 15ms
 GET /api/logs?t=1748016605164 200 in 15ms
 GET /api/logs?t=1748016606164 200 in 14ms
 GET /api/logs?t=1748016607164 200 in 18ms
 GET /api/logs?t=1748016608164 200 in 10ms
 GET /api/logs?t=1748016609162 200 in 14ms
 GET /api/logs?t=1748016610164 200 in 16ms
 GET /api/logs?t=1748016611162 200 in 16ms
 GET /api/logs?t=1748016612164 200 in 15ms
 GET /api/logs?t=1748016613163 200 in 16ms
 GET /api/logs?t=1748016614164 200 in 10ms
 GET /api/logs?t=1748016615164 200 in 18ms
 GET /api/logs?t=1748016616162 200 in 17ms
 GET /api/logs?t=1748016617164 200 in 16ms
 GET /api/logs?t=1748016618164 200 in 15ms
 GET /api/logs?t=1748016619164 200 in 15ms
 GET /api/logs?t=1748016620163 200 in 16ms
 GET /api/logs?t=1748016621162 200 in 14ms
 GET /api/logs?t=1748016622164 200 in 16ms
 GET /api/logs?t=1748016623163 200 in 18ms
 GET /api/logs?t=1748016624164 200 in 10ms
 GET /api/logs?t=1748016625164 200 in 12ms
 GET /api/logs?t=1748016626164 200 in 11ms
 GET /api/logs?t=1748016627163 200 in 16ms
 GET /api/logs?t=1748016628163 200 in 18ms
 GET /api/logs?t=1748016629164 200 in 19ms
 GET /api/logs?t=1748016630164 200 in 16ms
 GET /api/logs?t=1748016631164 200 in 19ms
 GET /api/logs?t=1748016632164 200 in 16ms
 GET /api/logs?t=1748016633162 200 in 16ms
 GET /api/logs?t=1748016634165 200 in 21ms
 GET /api/logs?t=1748016635164 200 in 16ms
 GET /api/logs?t=1748016636164 200 in 12ms
 GET /api/logs?t=1748016637163 200 in 20ms
 GET /api/logs?t=1748016638164 200 in 14ms
 GET /api/logs?t=1748016639164 200 in 22ms
 GET /api/logs?t=1748016640165 200 in 15ms
 GET /api/logs?t=1748016641164 200 in 14ms
 GET /api/logs?t=1748016642164 200 in 17ms
 GET /api/logs?t=1748016643164 200 in 15ms
 GET /api/logs?t=1748016644163 200 in 16ms
 GET /api/logs?t=1748016645164 200 in 15ms
 GET /api/logs?t=1748016646164 200 in 16ms
 GET /api/logs?t=1748016647162 200 in 19ms
 GET /api/logs?t=1748016648163 200 in 16ms
 GET /api/logs?t=1748016649163 200 in 13ms
 GET /api/logs?t=1748016650163 200 in 16ms
 GET /api/logs?t=1748016651164 200 in 14ms
 GET /api/logs?t=1748016652164 200 in 17ms
 GET /api/logs?t=1748016653163 200 in 15ms
 GET /api/logs?t=1748016654163 200 in 19ms
 GET /api/logs?t=1748016655164 200 in 15ms
 GET /api/logs?t=1748016656164 200 in 13ms
 GET /api/logs?t=1748016657164 200 in 16ms
 GET /api/logs?t=1748016658164 200 in 16ms
 GET /api/logs?t=1748016659165 200 in 14ms
 GET /api/logs?t=1748016660164 200 in 18ms
 GET /api/logs?t=1748016661162 200 in 12ms
 GET /api/logs?t=1748016662165 200 in 14ms
 GET /api/logs?t=1748016663165 200 in 21ms
 GET /api/logs?t=1748016664164 200 in 14ms
 GET /api/logs?t=1748016665163 200 in 16ms
 GET /api/logs?t=1748016666164 200 in 14ms
 GET /api/logs?t=1748016667163 200 in 16ms
 GET /api/logs?t=1748016668164 200 in 15ms
 GET /api/logs?t=1748016669164 200 in 13ms
 GET /api/logs?t=1748016670164 200 in 16ms
 GET /api/logs?t=1748016671164 200 in 18ms
 GET /api/logs?t=1748016672164 200 in 16ms
 GET /api/logs?t=1748016673164 200 in 12ms
 GET /api/logs?t=1748016674165 200 in 12ms
 GET /api/logs?t=1748016675164 200 in 19ms
 GET /api/logs?t=1748016676165 200 in 19ms
 GET /api/logs?t=1748016677164 200 in 16ms
 GET /api/logs?t=1748016678164 200 in 13ms
 GET /api/logs?t=1748016679164 200 in 20ms
 GET /api/logs?t=1748016680164 200 in 16ms
 GET /api/logs?t=1748016681165 200 in 14ms
 GET /api/logs?t=1748016682164 200 in 20ms
 GET /api/logs?t=1748016683165 200 in 16ms
 GET /api/logs?t=1748016684164 200 in 13ms
 GET /api/logs?t=1748016685164 200 in 14ms
 GET /api/logs?t=1748016686165 200 in 12ms
 GET /api/logs?t=1748016687163 200 in 16ms
 GET /api/logs?t=1748016688164 200 in 19ms
 GET /api/logs?t=1748016689164 200 in 17ms
 GET /api/logs?t=1748016690164 200 in 17ms
 GET /api/logs?t=1748016691164 200 in 17ms
 GET /api/logs?t=1748016692164 200 in 17ms
 GET /api/logs?t=1748016693162 200 in 19ms
 GET /api/logs?t=1748016694163 200 in 20ms
 GET /api/logs?t=1748016695165 200 in 17ms
 GET /api/logs?t=1748016696165 200 in 16ms
 GET /api/logs?t=1748016697165 200 in 17ms
 GET /api/logs?t=1748016698165 200 in 14ms
 GET /api/logs?t=1748016699164 200 in 17ms
 GET /api/logs?t=1748016700165 200 in 16ms
 GET /api/logs?t=1748016701165 200 in 18ms
 GET /api/logs?t=1748016702164 200 in 17ms
 GET /api/logs?t=1748016703165 200 in 17ms
 GET /api/logs?t=1748016704165 200 in 19ms
 GET /api/logs?t=1748016705163 200 in 16ms
 GET /api/logs?t=1748016706163 200 in 18ms
 GET /api/logs?t=1748016707165 200 in 15ms
 GET /api/logs?t=1748016708164 200 in 17ms
 GET /api/logs?t=1748016709164 200 in 15ms
 GET /api/logs?t=1748016710164 200 in 16ms
 GET /api/logs?t=1748016711162 200 in 14ms
 GET /api/logs?t=1748016712165 200 in 19ms
 GET /api/logs?t=1748016713164 200 in 12ms
 GET /api/logs?t=1748016714165 200 in 21ms
 GET /api/logs?t=1748016715165 200 in 13ms
 GET /api/logs?t=1748016716163 200 in 13ms
 GET /api/logs?t=1748016717163 200 in 15ms
 GET /api/logs?t=1748016718164 200 in 12ms
 GET /api/logs?t=1748016719165 200 in 15ms
 GET /api/logs?t=1748016720165 200 in 21ms
 GET /api/logs?t=1748016721165 200 in 13ms
 GET /api/logs?t=1748016722165 200 in 16ms
 GET /api/logs?t=1748016723165 200 in 13ms
 GET /api/logs?t=1748016724165 200 in 15ms
 GET /api/logs?t=1748016725165 200 in 15ms
 GET /api/logs?t=1748016726165 200 in 12ms
 GET /api/logs?t=1748016727165 200 in 14ms
 GET /api/logs?t=1748016728164 200 in 18ms
 GET /api/logs?t=1748016729165 200 in 12ms
 GET /api/logs?t=1748016730165 200 in 13ms
 GET /api/logs?t=1748016731165 200 in 17ms
 GET /api/logs?t=1748016732164 200 in 16ms
 GET /api/logs?t=1748016733165 200 in 16ms
 GET /api/logs?t=1748016734165 200 in 17ms
 GET /api/logs?t=1748016735164 200 in 16ms
 GET /api/logs?t=1748016736165 200 in 19ms
 GET /api/logs?t=1748016737164 200 in 15ms
 GET /api/logs?t=1748016738165 200 in 14ms
 GET /api/logs?t=1748016739165 200 in 15ms
 GET /api/logs?t=1748016740165 200 in 14ms
 GET /api/logs?t=1748016741165 200 in 13ms
 GET /api/logs?t=1748016742165 200 in 19ms
 GET /api/logs?t=1748016743165 200 in 17ms
 GET /api/logs?t=1748016744165 200 in 17ms
 GET /api/logs?t=1748016745165 200 in 8ms
 GET /api/logs?t=1748016746164 200 in 7ms
 GET /api/logs?t=1748016747164 200 in 16ms
 GET /api/logs?t=1748016748164 200 in 13ms
 GET /api/logs?t=1748016749164 200 in 12ms
 GET /api/logs?t=1748016750165 200 in 15ms
 GET /api/logs?t=1748016751165 200 in 16ms
 GET /api/logs?t=1748016752165 200 in 18ms
 GET /api/logs?t=1748016753165 200 in 15ms
 GET /api/logs?t=1748016754165 200 in 21ms
 GET /api/logs?t=1748016755165 200 in 17ms
 GET /api/logs?t=1748016756165 200 in 14ms
 GET /api/logs?t=1748016757165 200 in 17ms
 GET /api/logs?t=1748016758165 200 in 16ms
 GET /api/logs?t=1748016759165 200 in 16ms
 GET /api/logs?t=1748016760165 200 in 20ms
 GET /api/logs?t=1748016761165 200 in 16ms
 GET /api/logs?t=1748016762166 200 in 19ms
 GET /api/logs?t=1748016763164 200 in 17ms
 GET /api/logs?t=1748016764166 200 in 13ms
 GET /api/logs?t=1748016765165 200 in 20ms
 GET /api/logs?t=1748016766164 200 in 18ms
 GET /api/logs?t=1748016767166 200 in 16ms
 GET /api/logs?t=1748016768165 200 in 20ms
 GET /api/logs?t=1748016769166 200 in 14ms
 GET /api/logs?t=1748016770165 200 in 16ms
 GET /api/logs?t=1748016771165 200 in 14ms
 GET /api/logs?t=1748016772165 200 in 18ms
 GET /api/logs?t=1748016773165 200 in 16ms
 GET /api/logs?t=1748016774166 200 in 16ms
 GET /api/logs?t=1748016775164 200 in 12ms
 GET /api/logs?t=1748016776165 200 in 13ms
 GET /api/logs?t=1748016777165 200 in 15ms
 GET /api/logs?t=1748016778165 200 in 15ms
 GET /api/logs?t=1748016779166 200 in 14ms
 GET /api/logs?t=1748016780165 200 in 15ms
 GET /api/logs?t=1748016781165 200 in 9ms
 GET /api/logs?t=1748016782165 200 in 15ms
 GET /api/logs?t=1748016783165 200 in 16ms
 GET /api/logs?t=1748016784165 200 in 22ms
 GET /api/logs?t=1748016785165 200 in 17ms
 GET /api/logs?t=1748016786165 200 in 12ms
 GET /api/logs?t=1748016787165 200 in 16ms
 GET /api/logs?t=1748016788166 200 in 14ms
 GET /api/logs?t=1748016789165 200 in 12ms
 GET /api/logs?t=1748016790165 200 in 17ms
 GET /api/logs?t=1748016791166 200 in 15ms
 GET /api/logs?t=1748016792165 200 in 19ms
 GET /api/logs?t=1748016793166 200 in 17ms
 GET /api/logs?t=1748016794165 200 in 11ms
 GET /api/logs?t=1748016795166 200 in 15ms
 GET /api/logs?t=1748016796165 200 in 16ms
 GET /api/logs?t=1748016797166 200 in 15ms
 GET /api/logs?t=1748016798166 200 in 16ms
 GET /api/logs?t=1748016799166 200 in 16ms
 GET /api/logs?t=1748016800165 200 in 18ms
 GET /api/logs?t=1748016801165 200 in 13ms
 GET /api/logs?t=1748016802164 200 in 23ms
 GET /api/logs?t=1748016803165 200 in 17ms
 GET /api/logs?t=1748016804165 200 in 15ms
 GET /api/logs?t=1748016805164 200 in 13ms
 GET /api/logs?t=1748016806166 200 in 13ms
 GET /api/logs?t=1748016807166 200 in 16ms
 GET /api/logs?t=1748016808166 200 in 17ms
 GET /api/logs?t=1748016809166 200 in 16ms
 GET /api/logs?t=1748016810164 200 in 14ms
 GET /api/logs?t=1748016811165 200 in 14ms
 GET /api/logs?t=1748016812165 200 in 20ms
 GET /api/logs?t=1748016813164 200 in 15ms
 GET /api/logs?t=1748016814165 200 in 15ms
 GET /api/logs?t=1748016815166 200 in 19ms
 GET /api/logs?t=1748016816166 200 in 13ms
 GET /api/logs?t=1748016817163 200 in 23ms
 GET /api/logs?t=1748016818165 200 in 17ms
 GET /api/logs?t=1748016819166 200 in 12ms
 GET /api/logs?t=1748016820165 200 in 16ms
 GET /api/logs?t=1748016821166 200 in 16ms
 GET /api/logs?t=1748016822165 200 in 17ms
 GET /api/logs?t=1748016823166 200 in 16ms
 GET /api/logs?t=1748016824164 200 in 11ms
 GET /api/logs?t=1748016825166 200 in 21ms
 GET /api/logs?t=1748016826166 200 in 21ms
 GET /api/logs?t=1748016827166 200 in 15ms
 GET /api/logs?t=1748016828166 200 in 15ms
 GET /api/logs?t=1748016829166 200 in 17ms
 GET /api/logs?t=1748016830166 200 in 15ms
 GET /api/logs?t=1748016831166 200 in 13ms
 GET /api/logs?t=1748016832165 200 in 16ms
 GET /api/logs?t=1748016833165 200 in 18ms
 GET /api/logs?t=1748016834166 200 in 17ms
 GET /api/logs?t=1748016835166 200 in 13ms
 GET /api/logs?t=1748016836165 200 in 11ms
 GET /api/logs?t=1748016837166 200 in 14ms
 GET /api/logs?t=1748016838164 200 in 16ms
 GET /api/logs?t=1748016839166 200 in 16ms
 GET /api/logs?t=1748016840166 200 in 19ms
 GET /api/logs?t=1748016841166 200 in 14ms
 GET /api/logs?t=1748016842166 200 in 16ms
 GET /api/logs?t=1748016843166 200 in 16ms
 GET /api/logs?t=1748016844166 200 in 16ms
 GET /api/logs?t=1748016845166 200 in 16ms
 GET /api/logs?t=1748016846166 200 in 12ms
 GET /api/logs?t=1748016847166 200 in 19ms
 GET /api/logs?t=1748016848165 200 in 17ms
 GET /api/logs?t=1748016849166 200 in 16ms
 GET /api/logs?t=1748016850166 200 in 21ms
 GET /api/logs?t=1748016851166 200 in 17ms
 GET /api/logs?t=1748016852167 200 in 16ms
 GET /api/logs?t=1748016853165 200 in 18ms
 GET /api/logs?t=1748016854166 200 in 15ms
 GET /api/logs?t=1748016855166 200 in 16ms
 GET /api/logs?t=1748016856164 200 in 17ms
 GET /api/logs?t=1748016857165 200 in 16ms
 GET /api/logs?t=1748016858166 200 in 18ms
 GET /api/logs?t=1748016859166 200 in 11ms
 GET /api/logs?t=1748016860166 200 in 11ms
 GET /api/logs?t=1748016861167 200 in 15ms
 GET /api/logs?t=1748016862165 200 in 18ms
 GET /api/logs?t=1748016863166 200 in 22ms
 GET /api/logs?t=1748016864166 200 in 13ms
 GET /api/logs?t=1748016865166 200 in 18ms
 GET /api/logs?t=1748016866165 200 in 14ms
 GET /api/logs?t=1748016867164 200 in 16ms
 GET /api/logs?t=1748016868166 200 in 16ms
 GET /api/logs?t=1748016869165 200 in 14ms
 GET /api/logs?t=1748016870166 200 in 16ms
 GET /api/logs?t=1748016871167 200 in 16ms
 GET /api/logs?t=1748016872166 200 in 15ms
 GET /api/logs?t=1748016873166 200 in 21ms
 GET /api/logs?t=1748016874165 200 in 16ms
 GET /api/logs?t=1748016875165 200 in 14ms
 GET /api/logs?t=1748016876164 200 in 12ms
 GET /api/logs?t=1748016877167 200 in 17ms
 GET /api/logs?t=1748016878166 200 in 15ms
 GET /api/logs?t=1748016879167 200 in 15ms
 GET /api/logs?t=1748016880166 200 in 17ms
 GET /api/logs?t=1748016881167 200 in 20ms
 GET /api/logs?t=1748016882166 200 in 17ms
 GET /api/logs?t=1748016883166 200 in 17ms
 GET /api/logs?t=1748016884166 200 in 13ms
 GET /api/logs?t=1748016885166 200 in 16ms
 GET /api/logs?t=1748016886167 200 in 15ms
 GET /api/logs?t=1748016887167 200 in 17ms
 GET /api/logs?t=1748016888166 200 in 17ms
 GET /api/logs?t=1748016889166 200 in 18ms
 GET /api/logs?t=1748016890166 200 in 16ms
 GET /api/logs?t=1748016891166 200 in 14ms
 GET /api/logs?t=1748016892166 200 in 14ms
 GET /api/logs?t=1748016893166 200 in 15ms
 GET /api/logs?t=1748016894166 200 in 20ms
 GET /api/logs?t=1748016895167 200 in 12ms
 GET /api/logs?t=1748016896166 200 in 13ms
 GET /api/logs?t=1748016897165 200 in 19ms
 GET /api/logs?t=1748016898166 200 in 15ms
 GET /api/logs?t=1748016899167 200 in 16ms
 GET /api/logs?t=1748016900165 200 in 17ms
 GET /api/logs?t=1748016901167 200 in 13ms
 GET /api/logs?t=1748016902166 200 in 14ms
 GET /api/logs?t=1748016903166 200 in 21ms
 GET /api/logs?t=1748016904166 200 in 16ms
 GET /api/logs?t=1748016905166 200 in 19ms
 GET /api/logs?t=1748016906166 200 in 13ms
 GET /api/logs?t=1748016907167 200 in 15ms
 GET /api/logs?t=1748016908166 200 in 15ms
 GET /api/logs?t=1748016909167 200 in 14ms
 GET /api/logs?t=1748016910164 200 in 10ms
 GET /api/logs?t=1748016911167 200 in 15ms
 GET /api/logs?t=1748016912166 200 in 16ms
 GET /api/logs?t=1748016913167 200 in 22ms
 GET /api/logs?t=1748016914167 200 in 10ms
 GET /api/logs?t=1748016915167 200 in 16ms
 GET /api/logs?t=1748016916167 200 in 16ms
 GET /api/logs?t=1748016917166 200 in 17ms
 GET /api/logs?t=1748016918166 200 in 17ms
 GET /api/logs?t=1748016919167 200 in 16ms
 GET /api/logs?t=1748016920166 200 in 14ms
 GET /api/logs?t=1748016921167 200 in 15ms
 GET /api/logs?t=1748016922167 200 in 18ms
 GET /api/logs?t=1748016923167 200 in 17ms
 GET /api/logs?t=1748016924166 200 in 14ms
 GET /api/logs?t=1748016925167 200 in 14ms
 GET /api/logs?t=1748016926167 200 in 14ms
 GET /api/logs?t=1748016927167 200 in 19ms
 GET /api/logs?t=1748016928166 200 in 13ms
 GET /api/logs?t=1748016929165 200 in 18ms
 GET /api/logs?t=1748016930166 200 in 16ms
 GET /api/logs?t=1748016931167 200 in 15ms
 GET /api/logs?t=1748016932167 200 in 15ms
 GET /api/logs?t=1748016933165 200 in 17ms
 GET /api/logs?t=1748016934166 200 in 15ms
 GET /api/logs?t=1748016935166 200 in 17ms
 GET /api/logs?t=1748016936166 200 in 14ms
 GET /api/logs?t=1748016937166 200 in 20ms
 GET /api/logs?t=1748016938167 200 in 15ms
 GET /api/logs?t=1748016939167 200 in 15ms
 GET /api/logs?t=1748016940167 200 in 15ms
 GET /api/logs?t=1748016941167 200 in 15ms
 GET /api/logs?t=1748016942167 200 in 15ms
 GET /api/logs?t=1748016943167 200 in 15ms
 GET /api/logs?t=1748016944166 200 in 20ms
 GET /api/logs?t=1748016945167 200 in 15ms
 GET /api/logs?t=1748016946167 200 in 13ms
 GET /api/logs?t=1748016947167 200 in 15ms
 GET /api/logs?t=1748016948166 200 in 14ms
 GET /api/logs?t=1748016949166 200 in 17ms
 GET /api/logs?t=1748016950167 200 in 13ms
 GET /api/logs?t=1748016951167 200 in 13ms
 GET /api/logs?t=1748016952165 200 in 15ms
 GET /api/logs?t=1748016953167 200 in 15ms
 GET /api/logs?t=1748016954167 200 in 17ms
 GET /api/logs?t=1748016955167 200 in 13ms
 GET /api/logs?t=1748016956166 200 in 11ms
 GET /api/logs?t=1748016957168 200 in 15ms
 GET /api/logs?t=1748016958167 200 in 15ms
 GET /api/logs?t=1748016959167 200 in 14ms
 GET /api/logs?t=1748016960167 200 in 20ms
 GET /api/logs?t=1748016961167 200 in 16ms
 GET /api/logs?t=1748016962167 200 in 21ms
 GET /api/logs?t=1748016963166 200 in 17ms
 GET /api/logs?t=1748016964167 200 in 15ms
 GET /api/logs?t=1748016965166 200 in 16ms
 GET /api/logs?t=1748016966166 200 in 13ms
 GET /api/logs?t=1748016967165 200 in 15ms
 GET /api/logs?t=1748016968167 200 in 21ms
 GET /api/logs?t=1748016969165 200 in 15ms
 GET /api/logs?t=1748016970168 200 in 18ms
 GET /api/logs?t=1748016971166 200 in 17ms
 GET /api/logs?t=1748016972167 200 in 18ms
 GET /api/logs?t=1748016973166 200 in 16ms
 GET /api/logs?t=1748016974165 200 in 17ms
 GET /api/logs?t=1748016975167 200 in 16ms
 GET /api/logs?t=1748016976167 200 in 17ms
 GET /api/logs?t=1748016977168 200 in 16ms
 GET /api/logs?t=1748016978167 200 in 19ms
 GET /api/logs?t=1748016979168 200 in 21ms
 GET /api/logs?t=1748016980166 200 in 16ms
 GET /api/logs?t=1748016981167 200 in 16ms
 GET /api/logs?t=1748016982167 200 in 15ms
 GET /api/logs?t=1748016983167 200 in 14ms
 GET /api/logs?t=1748016984168 200 in 14ms
 GET /api/logs?t=1748016985167 200 in 12ms
 GET /api/logs?t=1748016986167 200 in 21ms
 GET /api/logs?t=1748016987167 200 in 15ms
 GET /api/logs?t=1748016988167 200 in 13ms
 GET /api/logs?t=1748016989166 200 in 18ms
 GET /api/logs?t=1748016990165 200 in 16ms
 GET /api/logs?t=1748016991167 200 in 16ms
 GET /api/logs?t=1748016992167 200 in 16ms
 GET /api/logs?t=1748016993168 200 in 16ms
 GET /api/logs?t=1748016994167 200 in 18ms
 GET /api/logs?t=1748016995168 200 in 17ms
 GET /api/logs?t=1748016996168 200 in 14ms
 GET /api/logs?t=1748016997168 200 in 17ms
 GET /api/logs?t=1748016998166 200 in 15ms
 GET /api/logs?t=1748016999167 200 in 16ms
 GET /api/logs?t=1748017000167 200 in 14ms
 GET /api/logs?t=1748017001167 200 in 16ms
 GET /api/logs?t=1748017002165 200 in 19ms
 GET /api/logs?t=1748017003168 200 in 16ms
 GET /api/logs?t=1748017004165 200 in 14ms
 GET /api/logs?t=1748017005167 200 in 16ms
 GET /api/logs?t=1748017006167 200 in 16ms
 GET /api/logs?t=1748017007168 200 in 16ms
 GET /api/logs?t=1748017008167 200 in 15ms
 GET /api/logs?t=1748017009166 200 in 15ms
 GET /api/logs?t=1748017010167 200 in 16ms
 GET /api/logs?t=1748017011168 200 in 12ms
 GET /api/logs?t=1748017012168 200 in 18ms
 GET /api/logs?t=1748017013168 200 in 14ms
 GET /api/logs?t=1748017014167 200 in 14ms
 GET /api/logs?t=1748017015167 200 in 13ms
 GET /api/logs?t=1748017016167 200 in 11ms
 GET /api/logs?t=1748017017166 200 in 16ms
 GET /api/logs?t=1748017018168 200 in 15ms
 GET /api/logs?t=1748017019166 200 in 17ms
 GET /api/logs?t=1748017020168 200 in 19ms
 GET /api/logs?t=1748017021168 200 in 11ms
 GET /api/logs?t=1748017022167 200 in 14ms
 GET /api/logs?t=1748017023167 200 in 14ms
 GET /api/logs?t=1748017024168 200 in 19ms
 GET /api/logs?t=1748017025168 200 in 17ms
 GET /api/logs?t=1748017026168 200 in 15ms
 GET /api/logs?t=1748017027166 200 in 15ms
 GET /api/logs?t=1748017028167 200 in 15ms
 GET /api/logs?t=1748017029168 200 in 14ms
 GET /api/logs?t=1748017030168 200 in 14ms
 GET /api/logs?t=1748017031167 200 in 16ms
 GET /api/logs?t=1748017032166 200 in 16ms
 GET /api/logs?t=1748017033167 200 in 16ms
 GET /api/logs?t=1748017034167 200 in 19ms
 GET /api/logs?t=1748017035167 200 in 16ms
 GET /api/logs?t=1748017036167 200 in 20ms
 GET /api/logs?t=1748017037168 200 in 16ms
 GET /api/logs?t=1748017038168 200 in 14ms
 GET /api/logs?t=1748017039168 200 in 15ms
 GET /api/logs?t=1748017040168 200 in 17ms
 GET /api/logs?t=1748017041168 200 in 14ms
 GET /api/logs?t=1748017042168 200 in 17ms
 GET /api/logs?t=1748017043168 200 in 18ms
 GET /api/logs?t=1748017044166 200 in 11ms
 GET /api/logs?t=1748017045167 200 in 14ms
 GET /api/logs?t=1748017046168 200 in 13ms
 GET /api/logs?t=1748017047168 200 in 15ms
 GET /api/logs?t=1748017048168 200 in 15ms
 GET /api/logs?t=1748017049168 200 in 17ms
 GET /api/logs?t=1748017050168 200 in 23ms
 GET /api/logs?t=1748017051167 200 in 17ms
 GET /api/logs?t=1748017052168 200 in 19ms
 GET /api/logs?t=1748017053168 200 in 18ms
 GET /api/logs?t=1748017054168 200 in 14ms
 GET /api/logs?t=1748017055166 200 in 16ms
 GET /api/logs?t=1748017056166 200 in 12ms
 GET /api/logs?t=1748017057168 200 in 15ms
 GET /api/logs?t=1748017058168 200 in 13ms
 GET /api/logs?t=1748017059167 200 in 16ms
 GET /api/logs?t=1748017060168 200 in 12ms
 GET /api/logs?t=1748017061168 200 in 17ms
 GET /api/logs?t=1748017062166 200 in 14ms
 GET /api/logs?t=1748017063168 200 in 16ms
 GET /api/logs?t=1748017064167 200 in 14ms
 GET /api/logs?t=1748017065167 200 in 15ms
 GET /api/logs?t=1748017066168 200 in 18ms
 GET /api/logs?t=1748017067167 200 in 18ms
 GET /api/logs?t=1748017068168 200 in 16ms
 GET /api/logs?t=1748017069168 200 in 16ms
 GET /api/logs?t=1748017070168 200 in 15ms
 GET /api/logs?t=1748017071168 200 in 12ms
 GET /api/logs?t=1748017072168 200 in 15ms
 GET /api/logs?t=1748017073168 200 in 19ms
 GET /api/logs?t=1748017074168 200 in 14ms
 GET /api/logs?t=1748017075166 200 in 16ms
 GET /api/logs?t=1748017076169 200 in 13ms
 GET /api/logs?t=1748017077168 200 in 14ms
 GET /api/logs?t=1748017078167 200 in 12ms
 GET /api/logs?t=1748017079169 200 in 13ms
 GET /api/logs?t=1748017080167 200 in 20ms
 GET /api/logs?t=1748017081168 200 in 12ms
 GET /api/logs?t=1748017082166 200 in 20ms
 GET /api/logs?t=1748017083166 200 in 17ms
 GET /api/logs?t=1748017084168 200 in 15ms
 GET /api/logs?t=1748017085168 200 in 18ms
 GET /api/logs?t=1748017086166 200 in 12ms
 GET /api/logs?t=1748017087167 200 in 14ms
 GET /api/logs?t=1748017088168 200 in 17ms
 GET /api/logs?t=1748017089168 200 in 16ms
 GET /api/logs?t=1748017090168 200 in 18ms
 GET /api/logs?t=1748017091168 200 in 6ms
 GET /api/logs?t=1748017092169 200 in 19ms
 GET /api/logs?t=1748017093169 200 in 14ms
 GET /api/logs?t=1748017094169 200 in 15ms
 GET /api/logs?t=1748017095168 200 in 18ms
 GET /api/logs?t=1748017096168 200 in 17ms
 GET /api/logs?t=1748017097167 200 in 23ms
 GET /api/logs?t=1748017098168 200 in 14ms
 GET /api/logs?t=1748017099169 200 in 15ms
 GET /api/logs?t=1748017100169 200 in 19ms
 GET /api/logs?t=1748017101168 200 in 12ms
 GET /api/logs?t=1748017102167 200 in 12ms
 GET /api/logs?t=1748017103168 200 in 16ms
 GET /api/logs?t=1748017104169 200 in 20ms
 GET /api/logs?t=1748017105168 200 in 13ms
 GET /api/logs?t=1748017106168 200 in 14ms
 GET /api/logs?t=1748017107168 200 in 16ms
 GET /api/logs?t=1748017108169 200 in 13ms
 GET /api/logs?t=1748017109166 200 in 15ms
 GET /api/logs?t=1748017110168 200 in 14ms
 GET /api/logs?t=1748017111168 200 in 8ms
 GET /api/logs?t=1748017112168 200 in 15ms
 GET /api/logs?t=1748017113168 200 in 17ms
 GET /api/logs?t=1748017114169 200 in 13ms
 GET /api/logs?t=1748017115168 200 in 13ms
 GET /api/logs?t=1748017116169 200 in 12ms
 GET /api/logs?t=1748017117169 200 in 15ms
 GET /api/logs?t=1748017118168 200 in 13ms
 GET /api/logs?t=1748017119168 200 in 13ms
 GET /api/logs?t=1748017120167 200 in 18ms
 GET /api/logs?t=1748017121169 200 in 16ms
 GET /api/logs?t=1748017122168 200 in 14ms
 GET /api/logs?t=1748017123167 200 in 13ms
 GET /api/logs?t=1748017124169 200 in 14ms
 GET /api/logs?t=1748017125168 200 in 16ms
 GET /api/logs?t=1748017126169 200 in 14ms
 GET /api/logs?t=1748017127169 200 in 15ms
 GET /api/logs?t=1748017128168 200 in 15ms
 GET /api/logs?t=1748017129169 200 in 16ms
 GET /api/logs?t=1748017130168 200 in 13ms
 GET /api/logs?t=1748017131168 200 in 14ms
 GET /api/logs?t=1748017132168 200 in 16ms
 GET /api/logs?t=1748017133169 200 in 15ms
 GET /api/logs?t=1748017134166 200 in 16ms
 GET /api/logs?t=1748017135168 200 in 13ms
 GET /api/logs?t=1748017136167 200 in 13ms
 GET /api/logs?t=1748017137168 200 in 15ms
 GET /api/logs?t=1748017138169 200 in 12ms
 GET /api/logs?t=1748017139168 200 in 16ms
 GET /api/logs?t=1748017140167 200 in 15ms
 GET /api/logs?t=1748017141169 200 in 13ms
 GET /api/logs?t=1748017142168 200 in 13ms
 GET /api/logs?t=1748017143169 200 in 16ms
 GET /api/logs?t=1748017144169 200 in 16ms
 GET /api/logs?t=1748017145169 200 in 19ms
 GET /api/logs?t=1748017146169 200 in 12ms
 GET /api/logs?t=1748017147168 200 in 15ms
 GET /api/logs?t=1748017148167 200 in 14ms
 GET /api/logs?t=1748017149167 200 in 17ms
 GET /api/logs?t=1748017150167 200 in 15ms
 GET /api/logs?t=1748017151169 200 in 13ms
 GET /api/logs?t=1748017152169 200 in 16ms
 GET /api/logs?t=1748017153168 200 in 21ms
 GET /api/logs?t=1748017154168 200 in 11ms
 GET /api/logs?t=1748017155169 200 in 16ms
 GET /api/logs?t=1748017156169 200 in 17ms
 GET /api/logs?t=1748017157167 200 in 15ms
 GET /api/logs?t=1748017158167 200 in 14ms
 GET /api/logs?t=1748017159169 200 in 16ms
 GET /api/logs?t=1748017160169 200 in 13ms
 GET /api/logs?t=1748017161169 200 in 13ms
 GET /api/logs?t=1748017162169 200 in 14ms
 GET /api/logs?t=1748017163167 200 in 16ms
 GET /api/logs?t=1748017164168 200 in 10ms
 GET /api/logs?t=1748017165169 200 in 15ms
 GET /api/logs?t=1748017166169 200 in 10ms
 GET /api/logs?t=1748017167167 200 in 20ms
 GET /api/logs?t=1748017168169 200 in 14ms
 GET /api/logs?t=1748017169169 200 in 15ms
 GET /api/logs?t=1748017170170 200 in 13ms
 GET /api/logs?t=1748017171169 200 in 17ms
 GET /api/logs?t=1748017172168 200 in 16ms
 GET /api/logs?t=1748017173169 200 in 15ms
 GET /api/logs?t=1748017174169 200 in 12ms
 GET /api/logs?t=1748017175168 200 in 17ms
 GET /api/logs?t=1748017176169 200 in 12ms
 GET /api/logs?t=1748017177170 200 in 19ms
 GET /api/logs?t=1748017178169 200 in 12ms
 GET /api/logs?t=1748017179169 200 in 14ms
 GET /api/logs?t=1748017180169 200 in 13ms
 GET /api/logs?t=1748017181169 200 in 14ms
 GET /api/logs?t=1748017182168 200 in 13ms
 GET /api/logs?t=1748017183169 200 in 17ms
 GET /api/logs?t=1748017184169 200 in 13ms
 GET /api/logs?t=1748017185169 200 in 15ms
 GET /api/logs?t=1748017186168 200 in 12ms
 GET /api/logs?t=1748017187168 200 in 14ms
 GET /api/logs?t=1748017188169 200 in 11ms
 GET /api/logs?t=1748017189169 200 in 15ms
 GET /api/logs?t=1748017190169 200 in 10ms
 GET /api/logs?t=1748017191169 200 in 17ms
 GET /api/logs?t=1748017192170 200 in 15ms
 GET /api/logs?t=1748017193169 200 in 15ms
 GET /api/logs?t=1748017194169 200 in 15ms
 GET /api/logs?t=1748017195169 200 in 12ms
 GET /api/logs?t=1748017196169 200 in 12ms
 GET /api/logs?t=1748017197169 200 in 18ms
 GET /api/logs?t=1748017198167 200 in 12ms
 GET /api/logs?t=1748017199170 200 in 17ms
 GET /api/logs?t=1748017200169 200 in 14ms
 GET /api/logs?t=1748017201169 200 in 11ms
 GET /api/logs?t=1748017202169 200 in 9ms
 GET /api/logs?t=1748017203170 200 in 16ms
 GET /api/logs?t=1748017204169 200 in 16ms
 GET /api/logs?t=1748017205169 200 in 15ms
 GET /api/logs?t=1748017206170 200 in 12ms
 GET /api/logs?t=1748017207169 200 in 16ms
 GET /api/logs?t=1748017208169 200 in 17ms
 GET /api/logs?t=1748017209169 200 in 13ms
 GET /api/logs?t=1748017210168 200 in 13ms
 GET /api/logs?t=1748017211169 200 in 14ms
 GET /api/logs?t=1748017212167 200 in 17ms
 GET /api/logs?t=1748017213170 200 in 17ms
 GET /api/logs?t=1748017214169 200 in 12ms
 GET /api/logs?t=1748017215168 200 in 17ms
 GET /api/logs?t=1748017216170 200 in 20ms
 GET /api/logs?t=1748017217168 200 in 17ms
 GET /api/logs?t=1748017218169 200 in 26ms
 GET /api/logs?t=1748017219169 200 in 15ms
 GET /api/logs?t=1748017220170 200 in 17ms
 GET /api/logs?t=1748017221169 200 in 20ms
 GET /api/logs?t=1748017222169 200 in 13ms
 GET /api/logs?t=1748017223170 200 in 16ms
 GET /api/logs?t=1748017224170 200 in 11ms
 GET /api/logs?t=1748017225169 200 in 14ms
 GET /api/logs?t=1748017226167 200 in 14ms
 GET /api/logs?t=1748017227170 200 in 17ms
 GET /api/logs?t=1748017228170 200 in 20ms
 GET /api/logs?t=1748017229170 200 in 14ms
 GET /api/logs?t=1748017230169 200 in 13ms
 GET /api/logs?t=1748017231170 200 in 16ms
 GET /api/logs?t=1748017232169 200 in 18ms
 GET /api/logs?t=1748017233168 200 in 17ms
 GET /api/logs?t=1748017234170 200 in 13ms
 GET /api/logs?t=1748017235170 200 in 16ms
 GET /api/logs?t=1748017236170 200 in 15ms
 GET /api/logs?t=1748017237170 200 in 17ms
 GET /api/logs?t=1748017238168 200 in 14ms
 GET /api/logs?t=1748017239169 200 in 16ms
 GET /api/logs?t=1748017240169 200 in 20ms
 GET /api/logs?t=1748017241169 200 in 16ms
 GET /api/logs?t=1748017242170 200 in 14ms
 GET /api/logs?t=1748017243169 200 in 16ms
 GET /api/logs?t=1748017244169 200 in 17ms
 GET /api/logs?t=1748017245168 200 in 18ms
 GET /api/logs?t=1748017246170 200 in 13ms
 GET /api/logs?t=1748017247169 200 in 14ms
 GET /api/logs?t=1748017248169 200 in 15ms
 GET /api/logs?t=1748017249168 200 in 18ms
 GET /api/logs?t=1748017250168 200 in 12ms
 GET /api/logs?t=1748017251169 200 in 11ms
 GET /api/logs?t=1748017252170 200 in 17ms
 GET /api/logs?t=1748017253170 200 in 16ms
 GET /api/logs?t=1748017254170 200 in 15ms
 GET /api/logs?t=1748017255170 200 in 14ms
 GET /api/logs?t=1748017256170 200 in 14ms
 GET /api/logs?t=1748017257170 200 in 15ms
 GET /api/logs?t=1748017258170 200 in 13ms
 GET /api/logs?t=1748017259168 200 in 16ms
 GET /api/logs?t=1748017260170 200 in 20ms
 GET /api/logs?t=1748017261170 200 in 13ms
 GET /api/logs?t=1748017262169 200 in 13ms
 GET /api/logs?t=1748017263170 200 in 20ms
 GET /api/logs?t=1748017264169 200 in 16ms
 GET /api/logs?t=1748017265170 200 in 16ms
 GET /api/logs?t=1748017266170 200 in 12ms
 GET /api/logs?t=1748017267170 200 in 17ms
 GET /api/logs?t=1748017268168 200 in 21ms
 GET /api/logs?t=1748017269170 200 in 12ms
 GET /api/logs?t=1748017270169 200 in 11ms
 GET /api/logs?t=1748017271171 200 in 16ms
 GET /api/logs?t=1748017272170 200 in 16ms
 GET /api/logs?t=1748017273170 200 in 16ms
 GET /api/logs?t=1748017274170 200 in 10ms
 GET /api/logs?t=1748017275169 200 in 15ms
 GET /api/logs?t=1748017276169 200 in 25ms
 GET /api/logs?t=1748017277170 200 in 14ms
 GET /api/logs?t=1748017278170 200 in 11ms
 GET /api/logs?t=1748017279168 200 in 15ms
 GET /api/logs?t=1748017280170 200 in 14ms
 GET /api/logs?t=1748017281170 200 in 13ms
 GET /api/logs?t=1748017282170 200 in 14ms
 GET /api/logs?t=1748017283171 200 in 16ms
 GET /api/logs?t=1748017284170 200 in 14ms
 GET /api/logs?t=1748017285170 200 in 14ms
 GET /api/logs?t=1748017286169 200 in 14ms
 GET /api/logs?t=1748017287170 200 in 16ms
 GET /api/logs?t=1748017288170 200 in 16ms
 GET /api/logs?t=1748017289170 200 in 17ms
 GET /api/logs?t=1748017290170 200 in 15ms
 GET /api/logs?t=1748017291171 200 in 12ms
 GET /api/logs?t=1748017292171 200 in 19ms
 GET /api/logs?t=1748017293169 200 in 16ms
 GET /api/logs?t=1748017294171 200 in 14ms
 GET /api/logs?t=1748017295170 200 in 16ms
 GET /api/logs?t=1748017296170 200 in 12ms
 GET /api/logs?t=1748017297169 200 in 17ms
 GET /api/logs?t=1748017298170 200 in 13ms
 GET /api/logs?t=1748017299171 200 in 15ms
 GET /api/logs?t=1748017300169 200 in 22ms
 GET /api/logs?t=1748017301170 200 in 20ms
 GET /api/logs?t=1748017302170 200 in 12ms
 GET /api/logs?t=1748017303170 200 in 15ms
 GET /api/logs?t=1748017304170 200 in 13ms
 GET /api/logs?t=1748017305171 200 in 19ms
 GET /api/logs?t=1748017306170 200 in 14ms
 GET /api/logs?t=1748017307170 200 in 17ms
 GET /api/logs?t=1748017308171 200 in 18ms
 GET /api/logs?t=1748017309171 200 in 14ms
 GET /api/logs?t=1748017310170 200 in 13ms
 GET /api/logs?t=1748017311170 200 in 11ms
 GET /api/logs?t=1748017312170 200 in 18ms
 GET /api/logs?t=1748017313171 200 in 19ms
 GET /api/logs?t=1748017314170 200 in 16ms
 GET /api/logs?t=1748017315170 200 in 14ms
 GET /api/logs?t=1748017316171 200 in 15ms
 GET /api/logs?t=1748017317170 200 in 14ms
 GET /api/logs?t=1748017318170 200 in 15ms
 GET /api/logs?t=1748017319170 200 in 18ms
 GET /api/logs?t=1748017320170 200 in 15ms
 GET /api/logs?t=1748017321170 200 in 12ms
 GET /api/logs?t=1748017322170 200 in 10ms
 GET /api/logs?t=1748017323170 200 in 15ms
 GET /api/logs?t=1748017324169 200 in 21ms
 GET /api/logs?t=1748017325170 200 in 20ms
 GET /api/logs?t=1748017326171 200 in 11ms
 GET /api/logs?t=1748017327171 200 in 15ms
 GET /api/logs?t=1748017328170 200 in 17ms
 GET /api/logs?t=1748017329170 200 in 14ms
 GET /api/logs?t=1748017330171 200 in 15ms
 GET /api/logs?t=1748017331171 200 in 17ms
 GET /api/logs?t=1748017332171 200 in 15ms
 GET /api/logs?t=1748017333169 200 in 16ms
 GET /api/logs?t=1748017334171 200 in 11ms
 GET /api/logs?t=1748017335169 200 in 12ms
 GET /api/logs?t=1748017336169 200 in 15ms
 GET /api/logs?t=1748017337171 200 in 20ms
 GET /api/logs?t=1748017338171 200 in 15ms
 GET /api/logs?t=1748017339171 200 in 14ms
 GET /api/logs?t=1748017340170 200 in 15ms
 GET /api/logs?t=1748017341170 200 in 18ms
 GET /api/logs?t=1748017342171 200 in 17ms
 GET /api/logs?t=1748017343170 200 in 16ms
 GET /api/logs?t=1748017344170 200 in 15ms
 GET /api/logs?t=1748017345171 200 in 12ms
 GET /api/logs?t=1748017346171 200 in 10ms
 GET /api/logs?t=1748017347171 200 in 15ms
 GET /api/logs?t=1748017348171 200 in 20ms
 GET /api/logs?t=1748017349171 200 in 49ms
 GET /api/logs?t=1748017350171 200 in 18ms
 GET /api/logs?t=1748017351171 200 in 14ms
 GET /api/logs?t=1748017352171 200 in 14ms
 GET /api/logs?t=1748017353171 200 in 15ms
 GET /api/logs?t=1748017354170 200 in 15ms
 GET /api/logs?t=1748017355171 200 in 13ms
 GET /api/logs?t=1748017356171 200 in 14ms
 GET /api/logs?t=1748017357171 200 in 18ms
 GET /api/logs?t=1748017358171 200 in 12ms
 GET /api/logs?t=1748017359170 200 in 15ms
 GET /api/logs?t=1748017360170 200 in 17ms
 GET /api/logs?t=1748017361169 200 in 15ms
 GET /api/logs?t=1748017362171 200 in 15ms
 GET /api/logs?t=1748017363170 200 in 16ms
 GET /api/logs?t=1748017364171 200 in 10ms
 GET /api/logs?t=1748017365171 200 in 16ms
 GET /api/logs?t=1748017366171 200 in 19ms
 GET /api/logs?t=1748017367171 200 in 18ms
 GET /api/logs?t=1748017368171 200 in 13ms
 GET /api/logs?t=1748017369171 200 in 18ms
 GET /api/logs?t=1748017370171 200 in 15ms
 GET /api/logs?t=1748017371170 200 in 11ms
 GET /api/logs?t=1748017372169 200 in 15ms
 GET /api/logs?t=1748017373171 200 in 14ms
 GET /api/logs?t=1748017374171 200 in 21ms
 GET /api/logs?t=1748017375171 200 in 12ms
 GET /api/logs?t=1748017376170 200 in 13ms
 GET /api/logs?t=1748017377170 200 in 20ms
 GET /api/logs?t=1748017378172 200 in 15ms
 GET /api/logs?t=1748017379171 200 in 15ms
 GET /api/logs?t=1748017380170 200 in 19ms
 GET /api/logs?t=1748017381170 200 in 12ms
 GET /api/logs?t=1748017382170 200 in 15ms
 GET /api/logs?t=1748017383171 200 in 14ms
 GET /api/logs?t=1748017384171 200 in 20ms
 GET /api/logs?t=1748017385169 200 in 16ms
 GET /api/logs?t=1748017386171 200 in 12ms
 GET /api/logs?t=1748017387170 200 in 15ms
 GET /api/logs?t=1748017388171 200 in 15ms
 GET /api/logs?t=1748017389170 200 in 13ms
 GET /api/logs?t=1748017390171 200 in 19ms
 GET /api/logs?t=1748017391170 200 in 16ms
 GET /api/logs?t=1748017392171 200 in 12ms
 GET /api/logs?t=1748017393171 200 in 16ms
 GET /api/logs?t=1748017394170 200 in 9ms
 GET /api/logs?t=1748017395172 200 in 16ms
 GET /api/logs?t=1748017396171 200 in 16ms
 GET /api/logs?t=1748017397171 200 in 17ms
 GET /api/logs?t=1748017398170 200 in 14ms
 GET /api/logs?t=1748017399172 200 in 15ms
 GET /api/logs?t=1748017400171 200 in 16ms
 GET /api/logs?t=1748017401170 200 in 13ms
 GET /api/logs?t=1748017402170 200 in 16ms
 GET /api/logs?t=1748017403172 200 in 17ms
 GET /api/logs?t=1748017404171 200 in 17ms
 GET /api/logs?t=1748017405171 200 in 12ms
 GET /api/logs?t=1748017406172 200 in 16ms
 GET /api/logs?t=1748017407171 200 in 19ms
 GET /api/logs?t=1748017408172 200 in 16ms
 GET /api/logs?t=1748017409171 200 in 16ms
 GET /api/logs?t=1748017410171 200 in 17ms
 GET /api/logs?t=1748017411170 200 in 19ms
 GET /api/logs?t=1748017412171 200 in 18ms
 GET /api/logs?t=1748017413172 200 in 15ms
 GET /api/logs?t=1748017414170 200 in 20ms
 GET /api/logs?t=1748017415171 200 in 17ms
 GET /api/logs?t=1748017416171 200 in 13ms
 GET /api/logs?t=1748017417172 200 in 19ms
 GET /api/logs?t=1748017418172 200 in 17ms
 GET /api/logs?t=1748017419172 200 in 16ms
 GET /api/logs?t=1748017420171 200 in 14ms
 GET /api/logs?t=1748017421172 200 in 16ms
 GET /api/logs?t=1748017422171 200 in 20ms
 GET /api/logs?t=1748017423171 200 in 18ms
 GET /api/logs?t=1748017424170 200 in 24ms
 GET /api/logs?t=1748017425171 200 in 15ms
 GET /api/logs?t=1748017426171 200 in 18ms
 GET /api/logs?t=1748017427169 200 in 20ms
 GET /api/logs?t=1748017428171 200 in 15ms
 GET /api/logs?t=1748017429171 200 in 16ms
 GET /api/logs?t=1748017430172 200 in 21ms
 GET /api/logs?t=1748017431170 200 in 14ms
 GET /api/logs?t=1748017432172 200 in 23ms
 GET /api/logs?t=1748017433171 200 in 17ms
 GET /api/logs?t=1748017434172 200 in 16ms
 GET /api/logs?t=1748017435172 200 in 14ms
 GET /api/logs?t=1748017436171 200 in 13ms
 GET /api/logs?t=1748017437172 200 in 16ms
 GET /api/logs?t=1748017438171 200 in 18ms
 GET /api/logs?t=1748017439172 200 in 15ms
 GET /api/logs?t=1748017440172 200 in 15ms
 GET /api/logs?t=1748017441170 200 in 11ms
 GET /api/logs?t=1748017442172 200 in 15ms
 GET /api/logs?t=1748017443172 200 in 15ms
 GET /api/logs?t=1748017444171 200 in 16ms
 GET /api/logs?t=1748017445172 200 in 15ms
 GET /api/logs?t=1748017446172 200 in 13ms
 GET /api/logs?t=1748017447171 200 in 15ms
 GET /api/logs?t=1748017448171 200 in 15ms
 GET /api/logs?t=1748017449171 200 in 15ms
 GET /api/logs?t=1748017450172 200 in 16ms
 GET /api/logs?t=1748017451172 200 in 18ms
 GET /api/logs?t=1748017452172 200 in 18ms
 GET /api/logs?t=1748017453172 200 in 17ms
 GET /api/logs?t=1748017454172 200 in 9ms
 GET /api/logs?t=1748017455172 200 in 20ms
 GET /api/logs?t=1748017456172 200 in 20ms
 GET /api/logs?t=1748017457171 200 in 13ms
 GET /api/logs?t=1748017458172 200 in 13ms
 GET /api/logs?t=1748017459172 200 in 14ms
 GET /api/logs?t=1748017460172 200 in 17ms
 GET /api/logs?t=1748017461170 200 in 15ms
 GET /api/logs?t=1748017462172 200 in 13ms
 GET /api/logs?t=1748017463172 200 in 22ms
 GET /api/logs?t=1748017464171 200 in 11ms
 GET /api/logs?t=1748017465172 200 in 23ms
 GET /api/logs?t=1748017466172 200 in 12ms
 GET /api/logs?t=1748017467172 200 in 16ms
 GET /api/logs?t=1748017468172 200 in 15ms
 GET /api/logs?t=1748017469172 200 in 17ms
 GET /api/logs?t=1748017470171 200 in 15ms
 GET /api/logs?t=1748017471172 200 in 21ms
 GET /api/logs?t=1748017472171 200 in 14ms
 GET /api/logs?t=1748017473171 200 in 14ms
 GET /api/logs?t=1748017474172 200 in 17ms
 GET /api/logs?t=1748017475170 200 in 17ms
 GET /api/logs?t=1748017476172 200 in 13ms
 GET /api/logs?t=1748017477172 200 in 15ms
 GET /api/logs?t=1748017478173 200 in 15ms
 GET /api/logs?t=1748017479172 200 in 16ms
 GET /api/logs?t=1748017480172 200 in 16ms
 GET /api/logs?t=1748017481173 200 in 14ms
 GET /api/logs?t=1748017482172 200 in 15ms
 GET /api/logs?t=1748017483172 200 in 15ms
 GET /api/logs?t=1748017484172 200 in 18ms
 GET /api/logs?t=1748017485170 200 in 16ms
 GET /api/logs?t=1748017486172 200 in 14ms
 GET /api/logs?t=1748017487172 200 in 15ms
 GET /api/logs?t=1748017488171 200 in 14ms
 GET /api/logs?t=1748017489171 200 in 14ms
 GET /api/logs?t=1748017490171 200 in 15ms
 GET /api/logs?t=1748017491172 200 in 12ms
 GET /api/logs?t=1748017492173 200 in 16ms
 GET /api/logs?t=1748017493171 200 in 14ms
 GET /api/logs?t=1748017494173 200 in 17ms
 GET /api/logs?t=1748017495173 200 in 15ms
 GET /api/logs?t=1748017496172 200 in 11ms
 GET /api/logs?t=1748017497173 200 in 18ms
 GET /api/logs?t=1748017498173 200 in 13ms
 GET /api/logs?t=1748017499173 200 in 14ms
 GET /api/logs?t=1748017500173 200 in 15ms
 GET /api/logs?t=1748017501171 200 in 11ms
 GET /api/logs?t=1748017502173 200 in 15ms
 GET /api/logs?t=1748017503173 200 in 22ms
 GET /api/logs?t=1748017504173 200 in 17ms
 GET /api/logs?t=1748017505171 200 in 14ms
 GET /api/logs?t=1748017506173 200 in 11ms
 GET /api/logs?t=1748017507172 200 in 15ms
 GET /api/logs?t=1748017508173 200 in 15ms
 GET /api/logs?t=1748017509171 200 in 10ms
 GET /api/logs?t=1748017510174 200 in 17ms
 GET /api/logs?t=1748017511173 200 in 16ms
 GET /api/logs?t=1748017512173 200 in 15ms
 GET /api/logs?t=1748017513174 200 in 20ms
 GET /api/logs?t=1748017514171 200 in 12ms
 GET /api/logs?t=1748017515173 200 in 15ms
 GET /api/logs?t=1748017516173 200 in 17ms
 GET /api/logs?t=1748017517174 200 in 15ms
 GET /api/logs?t=1748017518174 200 in 16ms
 GET /api/logs?t=1748017519174 200 in 12ms
 GET /api/logs?t=1748017520173 200 in 22ms
 GET /api/logs?t=1748017521174 200 in 15ms
 GET /api/logs?t=1748017522174 200 in 16ms
 GET /api/logs?t=1748017523173 200 in 15ms
 GET /api/logs?t=1748017524172 200 in 13ms
 GET /api/logs?t=1748017525173 200 in 14ms
 GET /api/logs?t=1748017526173 200 in 13ms
 GET /api/logs?t=1748017527173 200 in 20ms
 GET /api/logs?t=1748017528173 200 in 14ms
 GET /api/logs?t=1748017529174 200 in 13ms
 GET /api/logs?t=1748017530174 200 in 17ms
 GET /api/logs?t=1748017531174 200 in 16ms
 GET /api/logs?t=1748017532173 200 in 20ms
 GET /api/logs?t=1748017533173 200 in 18ms
 GET /api/logs?t=1748017534172 200 in 15ms
 GET /api/logs?t=1748017535173 200 in 16ms
 GET /api/logs?t=1748017536174 200 in 11ms
 GET /api/logs?t=1748017537173 200 in 16ms
 GET /api/logs?t=1748017538173 200 in 16ms
 GET /api/logs?t=1748017539173 200 in 16ms
 GET /api/logs?t=1748017540173 200 in 14ms
 GET /api/logs?t=1748017541173 200 in 15ms
 GET /api/logs?t=1748017542174 200 in 14ms
 GET /api/logs?t=1748017543174 200 in 15ms
 GET /api/logs?t=1748017544174 200 in 11ms
 GET /api/logs?t=1748017545174 200 in 18ms
 GET /api/logs?t=1748017546173 200 in 17ms
 GET /api/logs?t=1748017547174 200 in 15ms
 GET /api/logs?t=1748017548172 200 in 13ms
 GET /api/logs?t=1748017549174 200 in 16ms
 GET /api/logs?t=1748017550173 200 in 14ms
 GET /api/logs?t=1748017551173 200 in 14ms
 GET /api/logs?t=1748017552174 200 in 16ms
 GET /api/logs?t=1748017553173 200 in 15ms
 GET /api/logs?t=1748017554174 200 in 18ms
 GET /api/logs?t=1748017555174 200 in 15ms
 GET /api/logs?t=1748017556174 200 in 8ms
 GET /api/logs?t=1748017557174 200 in 16ms
 GET /api/logs?t=1748017558174 200 in 17ms
 GET /api/logs?t=1748017559174 200 in 15ms
 GET /api/logs?t=1748017560174 200 in 19ms
 GET /api/logs?t=1748017561174 200 in 8ms
 GET /api/logs?t=1748017562174 200 in 16ms
 GET /api/logs?t=1748017563174 200 in 15ms
 GET /api/logs?t=1748017564174 200 in 15ms
 GET /api/logs?t=1748017565173 200 in 15ms
 GET /api/logs?t=1748017566174 200 in 12ms
 GET /api/logs?t=1748017567174 200 in 16ms
 GET /api/logs?t=1748017568174 200 in 22ms
 GET /api/logs?t=1748017569174 200 in 13ms
 GET /api/logs?t=1748017570173 200 in 15ms
 GET /api/logs?t=1748017571173 200 in 15ms
 GET /api/logs?t=1748017572174 200 in 15ms
 GET /api/logs?t=1748017573174 200 in 19ms
 GET /api/logs?t=1748017574172 200 in 14ms
 GET /api/logs?t=1748017575172 200 in 16ms
 GET /api/logs?t=1748017576173 200 in 18ms
 GET /api/logs?t=1748017577174 200 in 15ms
 GET /api/logs?t=1748017578174 200 in 17ms
 GET /api/logs?t=1748017579174 200 in 16ms
 GET /api/logs?t=1748017580173 200 in 16ms
 GET /api/logs?t=1748017581174 200 in 12ms
 GET /api/logs?t=1748017582172 200 in 16ms
 GET /api/logs?t=1748017583174 200 in 18ms
 GET /api/logs?t=1748017584174 200 in 12ms
 GET /api/logs?t=1748017585174 200 in 16ms
 GET /api/logs?t=1748017586174 200 in 10ms
 GET /api/logs?t=1748017587173 200 in 16ms
 GET /api/logs?t=1748017588174 200 in 14ms
 GET /api/logs?t=1748017589174 200 in 31ms
 GET /api/logs?t=1748017590174 200 in 16ms
 GET /api/logs?t=1748017591174 200 in 18ms
 GET /api/logs?t=1748017592174 200 in 16ms
 GET /api/logs?t=1748017593175 200 in 17ms
 GET /api/logs?t=1748017594174 200 in 14ms
 GET /api/logs?t=1748017595173 200 in 15ms
 GET /api/logs?t=1748017596174 200 in 12ms
 GET /api/logs?t=1748017597174 200 in 19ms
 GET /api/logs?t=1748017598173 200 in 16ms
 GET /api/logs?t=1748017599174 200 in 12ms
 GET /api/logs?t=1748017600173 200 in 16ms
 GET /api/logs?t=1748017601175 200 in 19ms
 GET /api/logs?t=1748017602174 200 in 15ms
 GET /api/logs?t=1748017603174 200 in 10ms
 GET /api/logs?t=1748017604174 200 in 14ms
 GET /api/logs?t=1748017605175 200 in 18ms
 GET /api/logs?t=1748017606173 200 in 16ms
 GET /api/logs?t=1748017607174 200 in 15ms
 GET /api/logs?t=1748017608174 200 in 16ms
 GET /api/logs?t=1748017609175 200 in 21ms
 GET /api/logs?t=1748017610174 200 in 16ms
 GET /api/logs?t=1748017611174 200 in 11ms
 GET /api/logs?t=1748017612174 200 in 14ms
 GET /api/logs?t=1748017613175 200 in 16ms
 GET /api/logs?t=1748017614175 200 in 12ms
 GET /api/logs?t=1748017615173 200 in 12ms
 GET /api/logs?t=1748017616174 200 in 14ms
 GET /api/logs?t=1748017617175 200 in 19ms
 GET /api/logs?t=1748017618175 200 in 16ms
 GET /api/logs?t=1748017619175 200 in 15ms
 GET /api/logs?t=1748017620173 200 in 15ms
 GET /api/logs?t=1748017621174 200 in 12ms
 GET /api/logs?t=1748017622174 200 in 14ms
 GET /api/logs?t=1748017623174 200 in 15ms
 GET /api/logs?t=1748017624174 200 in 13ms
 GET /api/logs?t=1748017625172 200 in 18ms
 GET /api/logs?t=1748017626174 200 in 11ms
 GET /api/logs?t=1748017627175 200 in 15ms
 GET /api/logs?t=1748017628174 200 in 14ms
 GET /api/logs?t=1748017629174 200 in 13ms
 GET /api/logs?t=1748017630174 200 in 18ms
 GET /api/logs?t=1748017631175 200 in 15ms
 GET /api/logs?t=1748017632175 200 in 18ms
 GET /api/logs?t=1748017633174 200 in 21ms
 GET /api/logs?t=1748017634175 200 in 11ms
 GET /api/logs?t=1748017635175 200 in 16ms
 GET /api/logs?t=1748017636174 200 in 15ms
 GET /api/logs?t=1748017637174 200 in 14ms
 GET /api/logs?t=1748017638174 200 in 14ms
 GET /api/logs?t=1748017639173 200 in 16ms
 GET /api/logs?t=1748017640174 200 in 14ms
 GET /api/logs?t=1748017641175 200 in 13ms
 GET /api/logs?t=1748017642174 200 in 23ms
 GET /api/logs?t=1748017643174 200 in 15ms
 GET /api/logs?t=1748017644175 200 in 11ms
 GET /api/logs?t=1748017645174 200 in 12ms
 GET /api/logs?t=1748017646175 200 in 14ms
 GET /api/logs?t=1748017647174 200 in 15ms
 GET /api/logs?t=1748017648175 200 in 14ms
 GET /api/logs?t=1748017649173 200 in 14ms
 GET /api/logs?t=1748017650175 200 in 21ms
 GET /api/logs?t=1748017651174 200 in 16ms
 GET /api/logs?t=1748017652175 200 in 13ms
 GET /api/logs?t=1748017653175 200 in 18ms
 GET /api/logs?t=1748017654175 200 in 15ms
 GET /api/logs?t=1748017655174 200 in 18ms
 GET /api/logs?t=1748017656175 200 in 11ms
 GET /api/logs?t=1748017657175 200 in 16ms
 GET /api/logs?t=1748017658175 200 in 18ms
 GET /api/logs?t=1748017659175 200 in 15ms
 GET /api/logs?t=1748017660174 200 in 14ms
 GET /api/logs?t=1748017661175 200 in 15ms
 GET /api/logs?t=1748017662174 200 in 15ms
 GET /api/logs?t=1748017663175 200 in 15ms
 GET /api/logs?t=1748017664175 200 in 16ms
 GET /api/logs?t=1748017665174 200 in 14ms
 GET /api/logs?t=1748017666175 200 in 16ms
 GET /api/logs?t=1748017667175 200 in 19ms
 GET /api/logs?t=1748017668174 200 in 14ms
 GET /api/logs?t=1748017669175 200 in 15ms
 GET /api/logs?t=1748017670175 200 in 15ms
 GET /api/logs?t=1748017671174 200 in 10ms
 GET /api/logs?t=1748017672174 200 in 14ms
 GET /api/logs?t=1748017673175 200 in 13ms
 GET /api/logs?t=1748017674175 200 in 16ms
 GET /api/logs?t=1748017675174 200 in 12ms
 GET /api/logs?t=1748017676175 200 in 10ms
 GET /api/logs?t=1748017677174 200 in 17ms
 GET /api/logs?t=1748017678174 200 in 16ms
 GET /api/logs?t=1748017679175 200 in 12ms
 GET /api/logs?t=1748017680174 200 in 14ms
 GET /api/logs?t=1748017681175 200 in 11ms
 GET /api/logs?t=1748017682175 200 in 21ms
 GET /api/logs?t=1748017683173 200 in 16ms
 GET /api/logs?t=1748017684174 200 in 11ms
 GET /api/logs?t=1748017685175 200 in 16ms
 GET /api/logs?t=1748017686175 200 in 14ms
 GET /api/logs?t=1748017687173 200 in 15ms
 GET /api/logs?t=1748017688175 200 in 12ms
 GET /api/logs?t=1748017689175 200 in 13ms
 GET /api/logs?t=1748017690175 200 in 21ms
 GET /api/logs?t=1748017691173 200 in 16ms
 GET /api/logs?t=1748017692174 200 in 15ms
 GET /api/logs?t=1748017693176 200 in 15ms
 GET /api/logs?t=1748017694175 200 in 13ms
 GET /api/logs?t=1748017695175 200 in 16ms
 GET /api/logs?t=1748017696174 200 in 13ms
 GET /api/logs?t=1748017697174 200 in 16ms
 GET /api/logs?t=1748017698175 200 in 19ms
 GET /api/logs?t=1748017699174 200 in 13ms
 GET /api/logs?t=1748017700175 200 in 14ms
 GET /api/logs?t=1748017701175 200 in 14ms
 GET /api/logs?t=1748017702175 200 in 16ms
 GET /api/logs?t=1748017703175 200 in 16ms
 GET /api/logs?t=1748017704174 200 in 14ms
 GET /api/logs?t=1748017705175 200 in 14ms
 GET /api/logs?t=1748017706174 200 in 15ms
 GET /api/logs?t=1748017707175 200 in 18ms
 GET /api/logs?t=1748017708174 200 in 12ms
 GET /api/logs?t=1748017709175 200 in 15ms
 GET /api/logs?t=1748017710175 200 in 18ms
 GET /api/logs?t=1748017711175 200 in 17ms
 GET /api/logs?t=1748017712175 200 in 14ms
 GET /api/logs?t=1748017713175 200 in 15ms
 GET /api/logs?t=1748017714175 200 in 15ms
 GET /api/logs?t=1748017715175 200 in 17ms
 GET /api/logs?t=1748017716175 200 in 13ms
 GET /api/logs?t=1748017717175 200 in 15ms
 GET /api/logs?t=1748017718175 200 in 18ms
 GET /api/logs?t=1748017719176 200 in 16ms
 GET /api/logs?t=1748017720176 200 in 13ms
 GET /api/logs?t=1748017721176 200 in 15ms
 GET /api/logs?t=1748017722176 200 in 17ms
 GET /api/logs?t=1748017723175 200 in 22ms
 GET /api/logs?t=1748017724175 200 in 9ms
 GET /api/logs?t=1748017725175 200 in 15ms
 GET /api/logs?t=1748017726174 200 in 14ms
 GET /api/logs?t=1748017727175 200 in 15ms
 GET /api/logs?t=1748017728175 200 in 12ms
 GET /api/logs?t=1748017729176 200 in 14ms
 GET /api/logs?t=1748017730176 200 in 20ms
 GET /api/logs?t=1748017731175 200 in 14ms
 GET /api/logs?t=1748017732176 200 in 17ms
 GET /api/logs?t=1748017733174 200 in 15ms
 GET /api/logs?t=1748017734175 200 in 19ms
 GET /api/logs?t=1748017735175 200 in 15ms
 GET /api/logs?t=1748017736175 200 in 11ms
 GET /api/logs?t=1748017737175 200 in 15ms
 GET /api/logs?t=1748017738176 200 in 16ms
 GET /api/logs?t=1748017739176 200 in 18ms
 GET /api/logs?t=1748017740176 200 in 12ms
 GET /api/logs?t=1748017741176 200 in 11ms
 GET /api/logs?t=1748017742175 200 in 14ms
 GET /api/logs?t=1748017743175 200 in 15ms
 GET /api/logs?t=1748017744175 200 in 12ms
 GET /api/logs?t=1748017745174 200 in 15ms
 GET /api/logs?t=1748017746175 200 in 12ms
 GET /api/logs?t=1748017747176 200 in 13ms
 GET /api/logs?t=1748017748175 200 in 17ms
 GET /api/logs?t=1748017749175 200 in 11ms
 GET /api/logs?t=1748017750174 200 in 16ms
 GET /api/logs?t=1748017751175 200 in 17ms
 GET /api/logs?t=1748017752175 200 in 13ms
 GET /api/logs?t=1748017753176 200 in 14ms
 GET /api/logs?t=1748017754176 200 in 13ms
 GET /api/logs?t=1748017755175 200 in 25ms
 GET /api/logs?t=1748017756176 200 in 15ms
 GET /api/logs?t=1748017757176 200 in 15ms
 GET /api/logs?t=1748017758176 200 in 17ms
 GET /api/logs?t=1748017759175 200 in 15ms
 GET /api/logs?t=1748017760176 200 in 14ms
 GET /api/logs?t=1748017761175 200 in 17ms
 GET /api/logs?t=1748017762176 200 in 14ms
 GET /api/logs?t=1748017763176 200 in 15ms
 GET /api/logs?t=1748017764175 200 in 14ms
 GET /api/logs?t=1748017765176 200 in 12ms
 GET /api/logs?t=1748017766174 200 in 5ms
 GET /api/logs?t=1748017767175 200 in 13ms
 GET /api/logs?t=1748017768176 200 in 13ms
 GET /api/logs?t=1748017769176 200 in 18ms
 GET /api/logs?t=1748017770176 200 in 15ms
 GET /api/logs?t=1748017771176 200 in 19ms
 GET /api/logs?t=1748017772174 200 in 19ms
 GET /api/logs?t=1748017773176 200 in 15ms
 GET /api/logs?t=1748017774176 200 in 15ms
 GET /api/logs?t=1748017775175 200 in 15ms
 GET /api/logs?t=1748017776175 200 in 11ms
 GET /api/logs?t=1748017777176 200 in 16ms
 GET /api/logs?t=1748017778176 200 in 14ms
 GET /api/logs?t=1748017779175 200 in 15ms
 GET /api/logs?t=1748017780176 200 in 16ms
 GET /api/logs?t=1748017781176 200 in 18ms
 GET /api/logs?t=1748017782174 200 in 14ms
 GET /api/logs?t=1748017783174 200 in 19ms
 GET /api/logs?t=1748017784175 200 in 12ms
 GET /api/logs?t=1748017785176 200 in 14ms
 GET /api/logs?t=1748017786176 200 in 18ms
 GET /api/logs?t=1748017787176 200 in 14ms
 GET /api/logs?t=1748017788175 200 in 14ms
 GET /api/logs?t=1748017789174 200 in 17ms
 GET /api/logs?t=1748017790175 200 in 15ms
 GET /api/logs?t=1748017791176 200 in 17ms
 GET /api/logs?t=1748017792175 200 in 15ms
 GET /api/logs?t=1748017793176 200 in 15ms
 GET /api/logs?t=1748017794175 200 in 17ms
 GET /api/logs?t=1748017795176 200 in 13ms
 GET /api/logs?t=1748017796175 200 in 14ms
 GET /api/logs?t=1748017797177 200 in 16ms
 GET /api/logs?t=1748017798176 200 in 17ms
 GET /api/logs?t=1748017799176 200 in 17ms
 GET /api/logs?t=1748017800175 200 in 14ms
 GET /api/logs?t=1748017801176 200 in 12ms
 GET /api/logs?t=1748017802176 200 in 15ms
 GET /api/logs?t=1748017803176 200 in 15ms
 GET /api/logs?t=1748017804176 200 in 15ms
 GET /api/logs?t=1748017805176 200 in 16ms
 GET /api/logs?t=1748017806175 200 in 12ms
 GET /api/logs?t=1748017807174 200 in 11ms
 GET /api/logs?t=1748017808176 200 in 13ms
 GET /api/logs?t=1748017809177 200 in 15ms
 GET /api/logs?t=1748017810176 200 in 15ms
 GET /api/logs?t=1748017811176 200 in 16ms
 GET /api/logs?t=1748017812176 200 in 18ms
 GET /api/logs?t=1748017813176 200 in 19ms
 GET /api/logs?t=1748017814176 200 in 13ms
 GET /api/logs?t=1748017815177 200 in 15ms
 GET /api/logs?t=1748017816175 200 in 12ms
 GET /api/logs?t=1748017817177 200 in 15ms
 GET /api/logs?t=1748017818177 200 in 14ms
 GET /api/logs?t=1748017819177 200 in 16ms
 GET /api/logs?t=1748017820176 200 in 16ms
 GET /api/logs?t=1748017821176 200 in 13ms
 GET /api/logs?t=1748017822176 200 in 16ms
 GET /api/logs?t=1748017823176 200 in 14ms
 GET /api/logs?t=1748017824176 200 in 13ms
 GET /api/logs?t=1748017825177 200 in 13ms
 GET /api/logs?t=1748017826176 200 in 12ms
 GET /api/logs?t=1748017827176 200 in 14ms
 GET /api/logs?t=1748017828176 200 in 14ms
 GET /api/logs?t=1748017829174 200 in 17ms
 GET /api/logs?t=1748017830175 200 in 16ms
 GET /api/logs?t=1748017831176 200 in 17ms
 GET /api/logs?t=1748017832177 200 in 13ms
 GET /api/logs?t=1748017833177 200 in 15ms
 GET /api/logs?t=1748017834177 200 in 16ms
 GET /api/logs?t=1748017835176 200 in 11ms
 GET /api/logs?t=1748017836175 200 in 13ms
 GET /api/logs?t=1748017837176 200 in 16ms
 GET /api/logs?t=1748017838177 200 in 15ms
 GET /api/logs?t=1748017839177 200 in 16ms
 GET /api/logs?t=1748017840177 200 in 13ms
 GET /api/logs?t=1748017841176 200 in 15ms
 GET /api/logs?t=1748017842175 200 in 20ms
 GET /api/logs?t=1748017843177 200 in 14ms
 GET /api/logs?t=1748017844176 200 in 8ms
 GET /api/logs?t=1748017845176 200 in 21ms
 GET /api/logs?t=1748017846177 200 in 16ms
 GET /api/logs?t=1748017847177 200 in 14ms
 GET /api/logs?t=1748017848176 200 in 16ms
 GET /api/logs?t=1748017849176 200 in 16ms
 GET /api/logs?t=1748017850177 200 in 17ms
 GET /api/logs?t=1748017851177 200 in 14ms
 GET /api/logs?t=1748017852176 200 in 14ms
 GET /api/logs?t=1748017853177 200 in 22ms
 GET /api/logs?t=1748017854177 200 in 13ms
 GET /api/logs?t=1748017855175 200 in 13ms
 GET /api/logs?t=1748017856177 200 in 12ms
 GET /api/logs?t=1748017857177 200 in 15ms
 GET /api/logs?t=1748017858176 200 in 15ms
 GET /api/logs?t=1748017859177 200 in 14ms
 GET /api/logs?t=1748017860175 200 in 13ms
 GET /api/logs?t=1748017861177 200 in 28ms
 GET /api/logs?t=1748017862177 200 in 15ms
 GET /api/logs?t=1748017863177 200 in 15ms
 GET /api/logs?t=1748017864177 200 in 13ms
 GET /api/logs?t=1748017865176 200 in 15ms
 GET /api/logs?t=1748017866177 200 in 13ms
 GET /api/logs?t=1748017867176 200 in 13ms
 GET /api/logs?t=1748017868176 200 in 12ms
 GET /api/logs?t=1748017869177 200 in 15ms
 GET /api/logs?t=1748017870177 200 in 15ms
 GET /api/logs?t=1748017871177 200 in 15ms
 GET /api/logs?t=1748017872177 200 in 13ms
 GET /api/logs?t=1748017873177 200 in 15ms
 GET /api/logs?t=1748017874177 200 in 9ms
 GET /api/logs?t=1748017875176 200 in 15ms
 GET /api/logs?t=1748017876176 200 in 15ms
 GET /api/logs?t=1748017877177 200 in 14ms
 GET /api/logs?t=1748017878176 200 in 18ms
 GET /api/logs?t=1748017879177 200 in 12ms
 GET /api/logs?t=1748017880176 200 in 12ms
 GET /api/logs?t=1748017881177 200 in 13ms
 GET /api/logs?t=1748017882177 200 in 16ms
 GET /api/logs?t=1748017883177 200 in 13ms
 GET /api/logs?t=1748017884177 200 in 12ms
 GET /api/logs?t=1748017885177 200 in 13ms
 GET /api/logs?t=1748017886177 200 in 18ms
 GET /api/logs?t=1748017887177 200 in 15ms
 GET /api/logs?t=1748017888177 200 in 13ms
 GET /api/logs?t=1748017889177 200 in 14ms
 GET /api/logs?t=1748017890177 200 in 14ms
 GET /api/logs?t=1748017891176 200 in 15ms
 GET /api/logs?t=1748017892176 200 in 13ms
 GET /api/logs?t=1748017893177 200 in 15ms
 GET /api/logs?t=1748017894176 200 in 19ms
 GET /api/logs?t=1748017895177 200 in 12ms
 GET /api/logs?t=1748017896175 200 in 13ms
 GET /api/logs?t=1748017897177 200 in 19ms
 GET /api/logs?t=1748017898177 200 in 16ms
 GET /api/logs?t=1748017899176 200 in 13ms
 GET /api/logs?t=1748017900176 200 in 12ms
 GET /api/logs?t=1748017901177 200 in 15ms
 GET /api/logs?t=1748017902175 200 in 17ms
 GET /api/logs?t=1748017903175 200 in 16ms
 GET /api/logs?t=1748017904178 200 in 11ms
 GET /api/logs?t=1748017905177 200 in 13ms
 GET /api/logs?t=1748017906178 200 in 15ms
 GET /api/logs?t=1748017907176 200 in 14ms
 GET /api/logs?t=1748017908177 200 in 13ms
 GET /api/logs?t=1748017909177 200 in 8ms
 GET /api/logs?t=1748017910177 200 in 15ms
 GET /api/logs?t=1748017911177 200 in 8ms
 GET /api/logs?t=1748017912177 200 in 15ms
 GET /api/logs?t=1748017913178 200 in 15ms
 GET /api/logs?t=1748017914177 200 in 13ms
 GET /api/logs?t=1748017915177 200 in 12ms
 GET /api/logs?t=1748017916177 200 in 10ms
 GET /api/logs?t=1748017917177 200 in 11ms
 GET /api/logs?t=1748017918178 200 in 18ms
 GET /api/logs?t=1748017919177 200 in 17ms
 GET /api/logs?t=1748017920177 200 in 15ms
 GET /api/logs?t=1748017921178 200 in 10ms
 GET /api/logs?t=1748017922178 200 in 15ms
 GET /api/logs?t=1748017923177 200 in 14ms
 GET /api/logs?t=1748017924175 200 in 14ms
 GET /api/logs?t=1748017925177 200 in 13ms
 GET /api/logs?t=1748017926175 200 in 14ms
 GET /api/logs?t=1748017927178 200 in 11ms
 GET /api/logs?t=1748017928177 200 in 16ms
 GET /api/logs?t=1748017929177 200 in 12ms
 GET /api/logs?t=1748017930177 200 in 16ms
 GET /api/logs?t=1748017931178 200 in 14ms
 GET /api/logs?t=1748017932178 200 in 14ms
 GET /api/logs?t=1748017933177 200 in 16ms
 GET /api/logs?t=1748017934176 200 in 13ms
 GET /api/logs?t=1748017935178 200 in 16ms
 GET /api/logs?t=1748017936177 200 in 17ms
 GET /api/logs?t=1748017937176 200 in 14ms
 GET /api/logs?t=1748017938177 200 in 15ms
 GET /api/logs?t=1748017939176 200 in 17ms
 GET /api/logs?t=1748017940178 200 in 32ms
 GET /api/logs?t=1748017941178 200 in 12ms
 GET /api/logs?t=1748017942177 200 in 15ms
 GET /api/logs?t=1748017943177 200 in 21ms
 GET /api/logs?t=1748017944177 200 in 12ms
 GET /api/logs?t=1748017945177 200 in 12ms
 GET /api/logs?t=1748017946176 200 in 17ms
 GET /api/logs?t=1748017947177 200 in 16ms
 GET /api/logs?t=1748017948177 200 in 18ms
 GET /api/logs?t=1748017949178 200 in 15ms
 GET /api/logs?t=1748017950177 200 in 13ms
 GET /api/logs?t=1748017951177 200 in 19ms
 GET /api/logs?t=1748017952177 200 in 15ms
 GET /api/logs?t=1748017953178 200 in 14ms
 GET /api/logs?t=1748017954176 200 in 15ms
 GET /api/logs?t=1748017955177 200 in 17ms
 GET /api/logs?t=1748017956178 200 in 10ms
 GET /api/logs?t=1748017957175 200 in 15ms
 GET /api/logs?t=1748017958178 200 in 15ms
 GET /api/logs?t=1748017959178 200 in 17ms
 GET /api/logs?t=1748017960178 200 in 18ms
 GET /api/logs?t=1748017961178 200 in 15ms
 GET /api/logs?t=1748017962178 200 in 15ms
 GET /api/logs?t=1748017963178 200 in 17ms
 GET /api/logs?t=1748017964177 200 in 10ms
 GET /api/logs?t=1748017965176 200 in 16ms
 GET /api/logs?t=1748017966178 200 in 13ms
 GET /api/logs?t=1748017967178 200 in 17ms
 GET /api/logs?t=1748017968177 200 in 14ms
 GET /api/logs?t=1748017969178 200 in 15ms
 GET /api/logs?t=1748017970178 200 in 16ms
 GET /api/logs?t=1748017971177 200 in 13ms
 GET /api/logs?t=1748017972177 200 in 69ms
 GET /api/logs?t=1748017973177 200 in 16ms
 GET /api/logs?t=1748017974929 200 in 12ms
 GET /api/logs?t=1748017975931 200 in 30ms
 GET /api/logs?t=1748017976931 200 in 15ms
 GET /api/logs?t=1748017977931 200 in 16ms
 GET /api/logs?t=1748017978929 200 in 15ms
 GET /api/logs?t=1748017979930 200 in 14ms
 GET /api/logs?t=1748017980931 200 in 13ms
 GET /api/logs?t=1748017981931 200 in 14ms
 GET /api/logs?t=1748017982931 200 in 8ms
 GET /api/logs?t=1748017983931 200 in 18ms
 GET /api/logs?t=1748017984931 200 in 10ms
 GET /api/logs?t=1748017985931 200 in 14ms
 GET /api/logs?t=1748017986931 200 in 13ms
 GET /api/logs?t=1748017987932 200 in 14ms
 GET /api/logs?t=1748017988933 200 in 12ms
 GET /api/logs?t=1748017989932 200 in 13ms
 GET /api/logs?t=1748017990931 200 in 12ms
 GET /api/logs?t=1748017991931 200 in 19ms
 GET /api/logs?t=1748017992932 200 in 10ms
 GET /api/logs?t=1748017993932 200 in 15ms
 GET /api/logs?t=1748017994931 200 in 14ms
 GET /api/logs?t=1748017995931 200 in 13ms
 GET /api/logs?t=1748017996930 200 in 12ms
 GET /api/logs?t=1748017997929 200 in 12ms
 GET /api/logs?t=1748017998931 200 in 10ms
 GET /api/logs?t=1748017999931 200 in 16ms
 GET /api/logs?t=1748018000932 200 in 21ms
 GET /api/logs?t=1748018001931 200 in 14ms
 GET /api/logs?t=1748018002931 200 in 12ms
 GET /api/logs?t=1748018003931 200 in 19ms
 GET /api/logs?t=1748018004932 200 in 8ms
 GET /api/logs?t=1748018005931 200 in 16ms
 GET /api/logs?t=1748018006931 200 in 15ms
 GET /api/logs?t=1748018007931 200 in 13ms
 GET /api/logs?t=1748018008931 200 in 17ms
 GET /api/logs?t=1748018009931 200 in 14ms
 GET /api/logs?t=1748018010931 200 in 14ms
 GET /api/logs?t=1748018011931 200 in 13ms
 GET /api/logs?t=1748018012931 200 in 17ms
 GET /api/logs?t=1748018013931 200 in 12ms
 GET /api/logs?t=1748018014931 200 in 13ms
 GET /api/logs?t=1748018015931 200 in 14ms
 GET /api/logs?t=1748018016931 200 in 16ms
 GET /api/logs?t=1748018017931 200 in 16ms
 GET /api/logs?t=1748018018930 200 in 14ms
 GET /api/logs?t=1748018019932 200 in 13ms
 GET /api/logs?t=1748018020931 200 in 14ms
 GET /api/logs?t=1748018021931 200 in 16ms
 GET /api/logs?t=1748018022931 200 in 17ms
 GET /api/logs?t=1748018023931 200 in 14ms
 GET /api/logs?t=1748018024931 200 in 17ms
 GET /api/logs?t=1748018025931 200 in 12ms
 GET /api/logs?t=1748018026931 200 in 14ms
 GET /api/logs?t=1748018027931 200 in 13ms
 GET /api/logs?t=1748018028931 200 in 14ms
 GET /api/logs?t=1748018029931 200 in 12ms
 GET /api/logs?t=1748018030932 200 in 12ms
 GET /api/logs?t=1748018031932 200 in 17ms
 GET /api/logs?t=1748018032930 200 in 18ms
 GET /api/logs?t=1748018048935 200 in 12ms
 GET /api/logs?t=1748018108937 200 in 26ms
 GET /api/logs?t=1748018168940 200 in 57ms
 GET /api/logs?t=1748018228940 200 in 15ms
 GET /api/logs?t=1748018288940 200 in 15ms
 GET /api/logs?t=1748018348939 200 in 34ms
 GET /api/logs?t=1748018408934 200 in 16ms
 GET /api/logs?t=1748018468940 200 in 40ms
 GET /api/logs?t=1748018528936 200 in 21ms
 GET /api/logs?t=1748018588935 200 in 15ms
 GET /api/logs?t=1748018648941 200 in 16ms
 GET /api/logs?t=1748018708938 200 in 89ms
 GET /api/logs?t=1748018768944 200 in 21ms
 GET /api/logs?t=1748018828945 200 in 23ms
 GET /api/logs?t=1748018888939 200 in 27ms
 GET /api/logs?t=1748018948946 200 in 19ms
 GET /api/logs?t=1748019008947 200 in 27ms
 GET /api/logs?t=1748019068944 200 in 27ms
 GET /api/logs?t=1748019128949 200 in 19ms
 GET /api/logs?t=1748019188943 200 in 78ms
 GET /api/logs?t=1748019248942 200 in 17ms
 GET /api/logs?t=1748019308942 200 in 35ms
 GET /api/logs?t=1748019368945 200 in 21ms
 GET /api/logs?t=1748019428944 200 in 22ms
 GET /api/logs?t=1748019488943 200 in 17ms
 GET /api/logs?t=1748019548948 200 in 87ms
 GET /api/logs?t=1748019608949 200 in 103ms
 GET /api/logs?t=1748019668946 200 in 18ms
 GET /api/logs?t=1748019728946 200 in 36ms
 GET /api/logs?t=1748019788949 200 in 26ms
 GET /api/logs?t=1748019848947 200 in 18ms
 GET /api/logs?t=1748019908948 200 in 18ms
 GET /api/logs?t=1748019968951 200 in 19ms
 GET /api/logs?t=1748020028946 200 in 15ms
 GET /api/logs?t=1748020088948 200 in 22ms
 GET /api/logs?t=1748020148949 200 in 18ms
 GET /api/logs?t=1748020208951 200 in 12ms
 GET /api/logs?t=1748020268951 200 in 14ms
 GET /api/logs?t=1748020328950 200 in 19ms
 GET /api/logs?t=1748020388952 200 in 16ms
 GET /api/logs?t=1748020448949 200 in 17ms
 GET /api/logs?t=1748020508957 200 in 26ms
 GET /api/logs?t=1748020568955 200 in 16ms
 GET /api/logs?t=1748020628950 200 in 19ms
 GET /api/logs?t=1748020688953 200 in 15ms
 GET /api/logs?t=1748020748958 200 in 15ms
 GET /api/logs?t=1748020808955 200 in 34ms
 GET /api/logs?t=1748020868956 200 in 19ms
 GET /api/logs?t=1748020928923 200 in 21ms
 GET /api/logs?t=1748020988916 200 in 38ms
 GET /api/logs?t=1748021048917 200 in 21ms
 GET /api/logs?t=1748021108916 200 in 15ms
 GET /api/logs?t=1748021168918 200 in 26ms
 GET /api/logs?t=1748021228912 200 in 19ms
 GET /api/logs?t=1748021288919 200 in 17ms
 GET /api/logs?t=1748021348913 200 in 33ms
 GET /api/logs?t=1748021408917 200 in 23ms
 GET /api/logs?t=1748021468914 200 in 32ms
 GET /api/logs?t=1748021528918 200 in 97ms
 GET /api/logs?t=1748021588914 200 in 58ms
 GET /api/logs?t=1748021648915 200 in 24ms
 GET /api/logs?t=1748021708912 200 in 17ms
 GET /api/logs?t=1748021750795 200 in 575ms
 GET /api/logs?t=1748021751160 200 in 129ms
 GET /api/logs?t=1748021752157 200 in 31ms
 GET /api/logs?t=1748021753157 200 in 17ms
 GET /api/logs?t=1748021754156 200 in 16ms
 GET /api/logs?t=1748021755910 200 in 15ms
 GET /api/logs?t=1748021756910 200 in 20ms
 GET /api/logs?t=1748021757910 200 in 8ms
 GET /api/logs?t=1748021758909 200 in 12ms
 GET /api/logs?t=1748021759909 200 in 36ms
 GET /api/logs?t=1748021760910 200 in 7ms
 GET /api/logs?t=1748021761910 200 in 10ms
 GET /api/logs?t=1748021762910 200 in 14ms
 GET /api/logs?t=1748021763910 200 in 8ms
 GET /api/logs?t=1748021764910 200 in 8ms
 GET /api/logs?t=1748021765910 200 in 10ms
 GET /api/logs?t=1748021766910 200 in 6ms
 GET /api/logs?t=1748021767910 200 in 11ms
 GET /api/logs?t=1748021768915 200 in 13ms
 GET /api/logs?t=1748021769910 200 in 12ms
 GET /api/logs?t=1748021770910 200 in 13ms
 GET /api/logs?t=1748021771909 200 in 10ms
 GET /api/logs?t=1748021772910 200 in 9ms
 GET /api/logs?t=1748021773910 200 in 10ms
 GET /api/logs?t=1748021774910 200 in 14ms
 GET /api/logs?t=1748021775910 200 in 11ms
 GET /api/logs?t=1748021776909 200 in 12ms
 GET /api/logs?t=1748021777910 200 in 10ms
 GET /api/logs?t=1748021778910 200 in 10ms
 GET /api/logs?t=1748021779909 200 in 13ms
 GET /api/logs?t=1748021780910 200 in 13ms
 GET /api/logs?t=1748021781910 200 in 12ms
 GET /api/logs?t=1748021782910 200 in 12ms
 GET /api/logs?t=1748021783909 200 in 12ms
 GET /api/logs?t=1748021784910 200 in 8ms
 GET /api/logs?t=1748021785910 200 in 13ms
 GET /api/logs?t=1748021786910 200 in 10ms
 GET /api/logs?t=1748021787910 200 in 5ms
 GET /api/logs?t=1748021788910 200 in 12ms
 GET /api/logs?t=1748021789910 200 in 12ms
 GET /api/logs?t=1748021790909 200 in 12ms
 GET /api/logs?t=1748021791910 200 in 14ms
 GET /api/logs?t=1748021792910 200 in 10ms
 GET /api/logs?t=1748021793910 200 in 13ms
 GET /api/logs?t=1748021794910 200 in 12ms
 GET /api/logs?t=1748021795910 200 in 13ms
 GET /api/logs?t=1748021796910 200 in 13ms
 GET /api/logs?t=1748021797910 200 in 11ms
 GET /api/logs?t=1748021798910 200 in 11ms
 GET /api/logs?t=1748021799910 200 in 11ms
 GET /api/logs?t=1748021800910 200 in 13ms
 GET /api/logs?t=1748021801910 200 in 11ms
 GET /api/logs?t=1748021802910 200 in 12ms
 GET /api/logs?t=1748021803910 200 in 10ms
 GET /api/logs?t=1748021804910 200 in 12ms
 GET /api/logs?t=1748021805909 200 in 9ms
 GET /api/logs?t=1748021806909 200 in 11ms
 GET /api/logs?t=1748021807910 200 in 11ms
 GET /api/logs?t=1748021808910 200 in 13ms
 GET /api/logs?t=1748021809909 200 in 9ms
 GET /api/logs?t=1748021810910 200 in 12ms
 GET /api/logs?t=1748021811910 200 in 10ms
 GET /api/logs?t=1748021812910 200 in 13ms
 GET /api/logs?t=1748021813910 200 in 9ms
 GET /api/logs?t=1748021814909 200 in 9ms
 GET /api/logs?t=1748021828913 200 in 15ms
 GET /api/logs?t=1748021888910 200 in 93ms
[?25h
