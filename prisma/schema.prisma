generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  githubId  String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  tasks     Task[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id                String       @id @default(cuid())
  title             String
  description       String
  repository        String
  branch            String
  status            TaskStatus   @default(OPEN)
  authorId          String
  metrics           Json?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  pullRequestNumber Int?
  pullRequestUrl    String?
  claudeJobs        ClaudeJob[]
  codeChanges       CodeChange[]
  author            User         @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@index([status])
}

model CodeChange {
  id              String    @id @default(cuid())
  taskId          String
  filePath        String
  action          String
  previousContent String?
  newContent      String
  diff            String
  approved        Boolean   @default(false)
  appliedAt       DateTime?
  createdAt       DateTime  @default(now())
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model ClaudeJob {
  id          String   @id @default(cuid())
  taskId      String
  prompt      String
  response    String?
  model       String
  tokensUsed  Int?
  status      String
  error       String?
  generatedAt DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  REVIEWING
  MERGED
  ARCHIVED
  COMPLETED
}
